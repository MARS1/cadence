// Code generated by "stringer -type=ElementType"; DO NOT EDIT.

package ast

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ElementTypeUnknown-0]
	_ = x[ElementTypeProgram-1]
	_ = x[ElementTypeBlock-2]
	_ = x[ElementTypeFunctionBlock-3]
	_ = x[ElementTypeFunctionDeclaration-4]
	_ = x[ElementTypeSpecialFunctionDeclaration-5]
	_ = x[ElementTypeCompositeDeclaration-6]
	_ = x[ElementTypeInterfaceDeclaration-7]
	_ = x[ElementTypeEntitlementDeclaration-8]
	_ = x[ElementTypeAttachmentDeclaration-9]
	_ = x[ElementTypeFieldDeclaration-10]
	_ = x[ElementTypeEnumCaseDeclaration-11]
	_ = x[ElementTypePragmaDeclaration-12]
	_ = x[ElementTypeImportDeclaration-13]
	_ = x[ElementTypeTransactionDeclaration-14]
	_ = x[ElementTypeReturnStatement-15]
	_ = x[ElementTypeBreakStatement-16]
	_ = x[ElementTypeContinueStatement-17]
	_ = x[ElementTypeIfStatement-18]
	_ = x[ElementTypeSwitchStatement-19]
	_ = x[ElementTypeWhileStatement-20]
	_ = x[ElementTypeForStatement-21]
	_ = x[ElementTypeEmitStatement-22]
	_ = x[ElementTypeVariableDeclaration-23]
	_ = x[ElementTypeAssignmentStatement-24]
	_ = x[ElementTypeSwapStatement-25]
	_ = x[ElementTypeExpressionStatement-26]
	_ = x[ElementTypeRemoveStatement-27]
	_ = x[ElementTypeVoidExpression-28]
	_ = x[ElementTypeBoolExpression-29]
	_ = x[ElementTypeNilExpression-30]
	_ = x[ElementTypeIntegerExpression-31]
	_ = x[ElementTypeFixedPointExpression-32]
	_ = x[ElementTypeArrayExpression-33]
	_ = x[ElementTypeDictionaryExpression-34]
	_ = x[ElementTypeIdentifierExpression-35]
	_ = x[ElementTypeInvocationExpression-36]
	_ = x[ElementTypeMemberExpression-37]
	_ = x[ElementTypeIndexExpression-38]
	_ = x[ElementTypeConditionalExpression-39]
	_ = x[ElementTypeUnaryExpression-40]
	_ = x[ElementTypeBinaryExpression-41]
	_ = x[ElementTypeFunctionExpression-42]
	_ = x[ElementTypeStringExpression-43]
	_ = x[ElementTypeCastingExpression-44]
	_ = x[ElementTypeCreateExpression-45]
	_ = x[ElementTypeDestroyExpression-46]
	_ = x[ElementTypeReferenceExpression-47]
	_ = x[ElementTypeForceExpression-48]
	_ = x[ElementTypePathExpression-49]
	_ = x[ElementTypeAttachExpression-50]
}

const _ElementType_name = "ElementTypeUnknownElementTypeProgramElementTypeBlockElementTypeFunctionBlockElementTypeFunctionDeclarationElementTypeSpecialFunctionDeclarationElementTypeCompositeDeclarationElementTypeInterfaceDeclarationElementTypeEntitlementDeclarationElementTypeAttachmentDeclarationElementTypeFieldDeclarationElementTypeEnumCaseDeclarationElementTypePragmaDeclarationElementTypeImportDeclarationElementTypeTransactionDeclarationElementTypeReturnStatementElementTypeBreakStatementElementTypeContinueStatementElementTypeIfStatementElementTypeSwitchStatementElementTypeWhileStatementElementTypeForStatementElementTypeEmitStatementElementTypeVariableDeclarationElementTypeAssignmentStatementElementTypeSwapStatementElementTypeExpressionStatementElementTypeRemoveStatementElementTypeVoidExpressionElementTypeBoolExpressionElementTypeNilExpressionElementTypeIntegerExpressionElementTypeFixedPointExpressionElementTypeArrayExpressionElementTypeDictionaryExpressionElementTypeIdentifierExpressionElementTypeInvocationExpressionElementTypeMemberExpressionElementTypeIndexExpressionElementTypeConditionalExpressionElementTypeUnaryExpressionElementTypeBinaryExpressionElementTypeFunctionExpressionElementTypeStringExpressionElementTypeCastingExpressionElementTypeCreateExpressionElementTypeDestroyExpressionElementTypeReferenceExpressionElementTypeForceExpressionElementTypePathExpressionElementTypeAttachExpression"

var _ElementType_index = [...]uint16{0, 18, 36, 52, 76, 106, 143, 174, 205, 238, 270, 297, 327, 355, 383, 416, 442, 467, 495, 517, 543, 568, 591, 615, 645, 675, 699, 729, 755, 780, 805, 829, 857, 888, 914, 945, 976, 1007, 1034, 1060, 1092, 1118, 1145, 1174, 1201, 1229, 1256, 1284, 1314, 1340, 1365, 1392}

func (i ElementType) String() string {
	if i >= ElementType(len(_ElementType_index)-1) {
		return "ElementType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ElementType_name[_ElementType_index[i]:_ElementType_index[i+1]]
}
