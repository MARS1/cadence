// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindAddressValue-1]
	_ = x[MemoryKindStringValue-2]
	_ = x[MemoryKindCharacterValue-3]
	_ = x[MemoryKindNumberValue-4]
	_ = x[MemoryKindArrayValueBase-5]
	_ = x[MemoryKindDictionaryValueBase-6]
	_ = x[MemoryKindCompositeValueBase-7]
	_ = x[MemoryKindSimpleCompositeValueBase-8]
	_ = x[MemoryKindOptionalValue-9]
	_ = x[MemoryKindTypeValue-10]
	_ = x[MemoryKindPathValue-11]
	_ = x[MemoryKindIDCapabilityValue-12]
	_ = x[MemoryKindStorageReferenceValue-13]
	_ = x[MemoryKindAccountReferenceValue-14]
	_ = x[MemoryKindEphemeralReferenceValue-15]
	_ = x[MemoryKindInterpretedFunctionValue-16]
	_ = x[MemoryKindHostFunctionValue-17]
	_ = x[MemoryKindBoundFunctionValue-18]
	_ = x[MemoryKindBigInt-19]
	_ = x[MemoryKindSimpleCompositeValue-20]
	_ = x[MemoryKindPublishedValue-21]
	_ = x[MemoryKindStorageCapabilityControllerValue-22]
	_ = x[MemoryKindAccountCapabilityControllerValue-23]
	_ = x[MemoryKindAtreeArrayDataSlab-24]
	_ = x[MemoryKindAtreeArrayMetaDataSlab-25]
	_ = x[MemoryKindAtreeArrayElementOverhead-26]
	_ = x[MemoryKindAtreeMapDataSlab-27]
	_ = x[MemoryKindAtreeMapMetaDataSlab-28]
	_ = x[MemoryKindAtreeMapElementOverhead-29]
	_ = x[MemoryKindAtreeMapPreAllocatedElement-30]
	_ = x[MemoryKindAtreeEncodedSlab-31]
	_ = x[MemoryKindPrimitiveStaticType-32]
	_ = x[MemoryKindCompositeStaticType-33]
	_ = x[MemoryKindInterfaceStaticType-34]
	_ = x[MemoryKindVariableSizedStaticType-35]
	_ = x[MemoryKindConstantSizedStaticType-36]
	_ = x[MemoryKindDictionaryStaticType-37]
	_ = x[MemoryKindOptionalStaticType-38]
	_ = x[MemoryKindRestrictedStaticType-39]
	_ = x[MemoryKindUnauthorizedStaticAccess-40]
	_ = x[MemoryKindEntitlementSetStaticAccess-41]
	_ = x[MemoryKindEntitlementMapStaticAccess-42]
	_ = x[MemoryKindReferenceStaticType-43]
	_ = x[MemoryKindCapabilityStaticType-44]
	_ = x[MemoryKindFunctionStaticType-45]
	_ = x[MemoryKindCadenceVoidValue-46]
	_ = x[MemoryKindCadenceOptionalValue-47]
	_ = x[MemoryKindCadenceBoolValue-48]
	_ = x[MemoryKindCadenceStringValue-49]
	_ = x[MemoryKindCadenceCharacterValue-50]
	_ = x[MemoryKindCadenceAddressValue-51]
	_ = x[MemoryKindCadenceIntValue-52]
	_ = x[MemoryKindCadenceNumberValue-53]
	_ = x[MemoryKindCadenceArrayValueBase-54]
	_ = x[MemoryKindCadenceArrayValueLength-55]
	_ = x[MemoryKindCadenceDictionaryValue-56]
	_ = x[MemoryKindCadenceKeyValuePair-57]
	_ = x[MemoryKindCadenceStructValueBase-58]
	_ = x[MemoryKindCadenceStructValueSize-59]
	_ = x[MemoryKindCadenceResourceValueBase-60]
	_ = x[MemoryKindCadenceAttachmentValueBase-61]
	_ = x[MemoryKindCadenceResourceValueSize-62]
	_ = x[MemoryKindCadenceAttachmentValueSize-63]
	_ = x[MemoryKindCadenceEventValueBase-64]
	_ = x[MemoryKindCadenceEventValueSize-65]
	_ = x[MemoryKindCadenceContractValueBase-66]
	_ = x[MemoryKindCadenceContractValueSize-67]
	_ = x[MemoryKindCadenceEnumValueBase-68]
	_ = x[MemoryKindCadenceEnumValueSize-69]
	_ = x[MemoryKindCadencePathValue-70]
	_ = x[MemoryKindCadenceTypeValue-71]
	_ = x[MemoryKindCadenceIDCapabilityValue-72]
	_ = x[MemoryKindCadenceFunctionValue-73]
	_ = x[MemoryKindCadenceOptionalType-74]
	_ = x[MemoryKindCadenceVariableSizedArrayType-75]
	_ = x[MemoryKindCadenceConstantSizedArrayType-76]
	_ = x[MemoryKindCadenceDictionaryType-77]
	_ = x[MemoryKindCadenceField-78]
	_ = x[MemoryKindCadenceParameter-79]
	_ = x[MemoryKindCadenceTypeParameter-80]
	_ = x[MemoryKindCadenceStructType-81]
	_ = x[MemoryKindCadenceResourceType-82]
	_ = x[MemoryKindCadenceAttachmentType-83]
	_ = x[MemoryKindCadenceEventType-84]
	_ = x[MemoryKindCadenceContractType-85]
	_ = x[MemoryKindCadenceStructInterfaceType-86]
	_ = x[MemoryKindCadenceResourceInterfaceType-87]
	_ = x[MemoryKindCadenceContractInterfaceType-88]
	_ = x[MemoryKindCadenceFunctionType-89]
	_ = x[MemoryKindCadenceEntitlementSetAccess-90]
	_ = x[MemoryKindCadenceEntitlementMapAccess-91]
	_ = x[MemoryKindCadenceReferenceType-92]
	_ = x[MemoryKindCadenceRestrictedType-93]
	_ = x[MemoryKindCadenceCapabilityType-94]
	_ = x[MemoryKindCadenceEnumType-95]
	_ = x[MemoryKindRawString-96]
	_ = x[MemoryKindAddressLocation-97]
	_ = x[MemoryKindBytes-98]
	_ = x[MemoryKindVariable-99]
	_ = x[MemoryKindCompositeTypeInfo-100]
	_ = x[MemoryKindCompositeField-101]
	_ = x[MemoryKindInvocation-102]
	_ = x[MemoryKindStorageMap-103]
	_ = x[MemoryKindStorageKey-104]
	_ = x[MemoryKindTypeToken-105]
	_ = x[MemoryKindErrorToken-106]
	_ = x[MemoryKindSpaceToken-107]
	_ = x[MemoryKindProgram-108]
	_ = x[MemoryKindIdentifier-109]
	_ = x[MemoryKindArgument-110]
	_ = x[MemoryKindBlock-111]
	_ = x[MemoryKindFunctionBlock-112]
	_ = x[MemoryKindParameter-113]
	_ = x[MemoryKindParameterList-114]
	_ = x[MemoryKindTypeParameter-115]
	_ = x[MemoryKindTypeParameterList-116]
	_ = x[MemoryKindTransfer-117]
	_ = x[MemoryKindMembers-118]
	_ = x[MemoryKindTypeAnnotation-119]
	_ = x[MemoryKindDictionaryEntry-120]
	_ = x[MemoryKindFunctionDeclaration-121]
	_ = x[MemoryKindCompositeDeclaration-122]
	_ = x[MemoryKindAttachmentDeclaration-123]
	_ = x[MemoryKindInterfaceDeclaration-124]
	_ = x[MemoryKindEntitlementDeclaration-125]
	_ = x[MemoryKindEntitlementMappingElement-126]
	_ = x[MemoryKindEntitlementMappingDeclaration-127]
	_ = x[MemoryKindEnumCaseDeclaration-128]
	_ = x[MemoryKindFieldDeclaration-129]
	_ = x[MemoryKindTransactionDeclaration-130]
	_ = x[MemoryKindImportDeclaration-131]
	_ = x[MemoryKindVariableDeclaration-132]
	_ = x[MemoryKindSpecialFunctionDeclaration-133]
	_ = x[MemoryKindPragmaDeclaration-134]
	_ = x[MemoryKindAssignmentStatement-135]
	_ = x[MemoryKindBreakStatement-136]
	_ = x[MemoryKindContinueStatement-137]
	_ = x[MemoryKindEmitStatement-138]
	_ = x[MemoryKindExpressionStatement-139]
	_ = x[MemoryKindForStatement-140]
	_ = x[MemoryKindIfStatement-141]
	_ = x[MemoryKindReturnStatement-142]
	_ = x[MemoryKindSwapStatement-143]
	_ = x[MemoryKindSwitchStatement-144]
	_ = x[MemoryKindWhileStatement-145]
	_ = x[MemoryKindRemoveStatement-146]
	_ = x[MemoryKindBooleanExpression-147]
	_ = x[MemoryKindVoidExpression-148]
	_ = x[MemoryKindNilExpression-149]
	_ = x[MemoryKindStringExpression-150]
	_ = x[MemoryKindIntegerExpression-151]
	_ = x[MemoryKindFixedPointExpression-152]
	_ = x[MemoryKindArrayExpression-153]
	_ = x[MemoryKindDictionaryExpression-154]
	_ = x[MemoryKindIdentifierExpression-155]
	_ = x[MemoryKindInvocationExpression-156]
	_ = x[MemoryKindMemberExpression-157]
	_ = x[MemoryKindIndexExpression-158]
	_ = x[MemoryKindConditionalExpression-159]
	_ = x[MemoryKindUnaryExpression-160]
	_ = x[MemoryKindBinaryExpression-161]
	_ = x[MemoryKindFunctionExpression-162]
	_ = x[MemoryKindCastingExpression-163]
	_ = x[MemoryKindCreateExpression-164]
	_ = x[MemoryKindDestroyExpression-165]
	_ = x[MemoryKindReferenceExpression-166]
	_ = x[MemoryKindForceExpression-167]
	_ = x[MemoryKindPathExpression-168]
	_ = x[MemoryKindAttachExpression-169]
	_ = x[MemoryKindConstantSizedType-170]
	_ = x[MemoryKindDictionaryType-171]
	_ = x[MemoryKindFunctionType-172]
	_ = x[MemoryKindInstantiationType-173]
	_ = x[MemoryKindNominalType-174]
	_ = x[MemoryKindOptionalType-175]
	_ = x[MemoryKindReferenceType-176]
	_ = x[MemoryKindRestrictedType-177]
	_ = x[MemoryKindVariableSizedType-178]
	_ = x[MemoryKindPosition-179]
	_ = x[MemoryKindRange-180]
	_ = x[MemoryKindElaboration-181]
	_ = x[MemoryKindActivation-182]
	_ = x[MemoryKindActivationEntries-183]
	_ = x[MemoryKindVariableSizedSemaType-184]
	_ = x[MemoryKindConstantSizedSemaType-185]
	_ = x[MemoryKindDictionarySemaType-186]
	_ = x[MemoryKindOptionalSemaType-187]
	_ = x[MemoryKindRestrictedSemaType-188]
	_ = x[MemoryKindReferenceSemaType-189]
	_ = x[MemoryKindEntitlementSemaType-190]
	_ = x[MemoryKindEntitlementMapSemaType-191]
	_ = x[MemoryKindCapabilitySemaType-192]
	_ = x[MemoryKindOrderedMap-193]
	_ = x[MemoryKindOrderedMapEntryList-194]
	_ = x[MemoryKindOrderedMapEntry-195]
	_ = x[MemoryKindLast-196]
}

const _MemoryKind_name = "UnknownAddressValueStringValueCharacterValueNumberValueArrayValueBaseDictionaryValueBaseCompositeValueBaseSimpleCompositeValueBaseOptionalValueTypeValuePathValueIDCapabilityValueStorageReferenceValueAccountReferenceValueEphemeralReferenceValueInterpretedFunctionValueHostFunctionValueBoundFunctionValueBigIntSimpleCompositeValuePublishedValueStorageCapabilityControllerValueAccountCapabilityControllerValueAtreeArrayDataSlabAtreeArrayMetaDataSlabAtreeArrayElementOverheadAtreeMapDataSlabAtreeMapMetaDataSlabAtreeMapElementOverheadAtreeMapPreAllocatedElementAtreeEncodedSlabPrimitiveStaticTypeCompositeStaticTypeInterfaceStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeOptionalStaticTypeRestrictedStaticTypeUnauthorizedStaticAccessEntitlementSetStaticAccessEntitlementMapStaticAccessReferenceStaticTypeCapabilityStaticTypeFunctionStaticTypeCadenceVoidValueCadenceOptionalValueCadenceBoolValueCadenceStringValueCadenceCharacterValueCadenceAddressValueCadenceIntValueCadenceNumberValueCadenceArrayValueBaseCadenceArrayValueLengthCadenceDictionaryValueCadenceKeyValuePairCadenceStructValueBaseCadenceStructValueSizeCadenceResourceValueBaseCadenceAttachmentValueBaseCadenceResourceValueSizeCadenceAttachmentValueSizeCadenceEventValueBaseCadenceEventValueSizeCadenceContractValueBaseCadenceContractValueSizeCadenceEnumValueBaseCadenceEnumValueSizeCadencePathValueCadenceTypeValueCadenceIDCapabilityValueCadenceFunctionValueCadenceOptionalTypeCadenceVariableSizedArrayTypeCadenceConstantSizedArrayTypeCadenceDictionaryTypeCadenceFieldCadenceParameterCadenceTypeParameterCadenceStructTypeCadenceResourceTypeCadenceAttachmentTypeCadenceEventTypeCadenceContractTypeCadenceStructInterfaceTypeCadenceResourceInterfaceTypeCadenceContractInterfaceTypeCadenceFunctionTypeCadenceEntitlementSetAccessCadenceEntitlementMapAccessCadenceReferenceTypeCadenceRestrictedTypeCadenceCapabilityTypeCadenceEnumTypeRawStringAddressLocationBytesVariableCompositeTypeInfoCompositeFieldInvocationStorageMapStorageKeyTypeTokenErrorTokenSpaceTokenProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTypeParameterTypeParameterListTransferMembersTypeAnnotationDictionaryEntryFunctionDeclarationCompositeDeclarationAttachmentDeclarationInterfaceDeclarationEntitlementDeclarationEntitlementMappingElementEntitlementMappingDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementRemoveStatementBooleanExpressionVoidExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionAttachExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeRestrictedTypeVariableSizedTypePositionRangeElaborationActivationActivationEntriesVariableSizedSemaTypeConstantSizedSemaTypeDictionarySemaTypeOptionalSemaTypeRestrictedSemaTypeReferenceSemaTypeEntitlementSemaTypeEntitlementMapSemaTypeCapabilitySemaTypeOrderedMapOrderedMapEntryListOrderedMapEntryLast"

var _MemoryKind_index = [...]uint16{0, 7, 19, 30, 44, 55, 69, 88, 106, 130, 143, 152, 161, 178, 199, 220, 243, 267, 284, 302, 308, 328, 342, 374, 406, 424, 446, 471, 487, 507, 530, 557, 573, 592, 611, 630, 653, 676, 696, 714, 734, 758, 784, 810, 829, 849, 867, 883, 903, 919, 937, 958, 977, 992, 1010, 1031, 1054, 1076, 1095, 1117, 1139, 1163, 1189, 1213, 1239, 1260, 1281, 1305, 1329, 1349, 1369, 1385, 1401, 1425, 1445, 1464, 1493, 1522, 1543, 1555, 1571, 1591, 1608, 1627, 1648, 1664, 1683, 1709, 1737, 1765, 1784, 1811, 1838, 1858, 1879, 1900, 1915, 1924, 1939, 1944, 1952, 1969, 1983, 1993, 2003, 2013, 2022, 2032, 2042, 2049, 2059, 2067, 2072, 2085, 2094, 2107, 2120, 2137, 2145, 2152, 2166, 2181, 2200, 2220, 2241, 2261, 2283, 2308, 2337, 2356, 2372, 2394, 2411, 2430, 2456, 2473, 2492, 2506, 2523, 2536, 2555, 2567, 2578, 2593, 2606, 2621, 2635, 2650, 2667, 2681, 2694, 2710, 2727, 2747, 2762, 2782, 2802, 2822, 2838, 2853, 2874, 2889, 2905, 2923, 2940, 2956, 2973, 2992, 3007, 3021, 3037, 3054, 3068, 3080, 3097, 3108, 3120, 3133, 3147, 3164, 3172, 3177, 3188, 3198, 3215, 3236, 3257, 3275, 3291, 3309, 3326, 3345, 3367, 3385, 3395, 3414, 3429, 3433}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
