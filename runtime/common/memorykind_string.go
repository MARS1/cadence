// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindAddressValue-1]
	_ = x[MemoryKindStringValue-2]
	_ = x[MemoryKindCharacterValue-3]
	_ = x[MemoryKindNumberValue-4]
	_ = x[MemoryKindArrayValueBase-5]
	_ = x[MemoryKindDictionaryValueBase-6]
	_ = x[MemoryKindCompositeValueBase-7]
	_ = x[MemoryKindSimpleCompositeValueBase-8]
	_ = x[MemoryKindOptionalValue-9]
	_ = x[MemoryKindTypeValue-10]
	_ = x[MemoryKindPathValue-11]
	_ = x[MemoryKindStorageCapabilityValue-12]
	_ = x[MemoryKindPathLinkValue-13]
	_ = x[MemoryKindAccountLinkValue-14]
	_ = x[MemoryKindStorageReferenceValue-15]
	_ = x[MemoryKindAccountReferenceValue-16]
	_ = x[MemoryKindEphemeralReferenceValue-17]
	_ = x[MemoryKindInterpretedFunctionValue-18]
	_ = x[MemoryKindHostFunctionValue-19]
	_ = x[MemoryKindBoundFunctionValue-20]
	_ = x[MemoryKindBigInt-21]
	_ = x[MemoryKindSimpleCompositeValue-22]
	_ = x[MemoryKindPublishedValue-23]
	_ = x[MemoryKindAtreeArrayDataSlab-24]
	_ = x[MemoryKindAtreeArrayMetaDataSlab-25]
	_ = x[MemoryKindAtreeArrayElementOverhead-26]
	_ = x[MemoryKindAtreeMapDataSlab-27]
	_ = x[MemoryKindAtreeMapMetaDataSlab-28]
	_ = x[MemoryKindAtreeMapElementOverhead-29]
	_ = x[MemoryKindAtreeMapPreAllocatedElement-30]
	_ = x[MemoryKindAtreeEncodedSlab-31]
	_ = x[MemoryKindPrimitiveStaticType-32]
	_ = x[MemoryKindCompositeStaticType-33]
	_ = x[MemoryKindInterfaceStaticType-34]
	_ = x[MemoryKindVariableSizedStaticType-35]
	_ = x[MemoryKindConstantSizedStaticType-36]
	_ = x[MemoryKindDictionaryStaticType-37]
	_ = x[MemoryKindOptionalStaticType-38]
	_ = x[MemoryKindRestrictedStaticType-39]
	_ = x[MemoryKindReferenceStaticType-40]
	_ = x[MemoryKindCapabilityStaticType-41]
	_ = x[MemoryKindFunctionStaticType-42]
	_ = x[MemoryKindCadenceVoidValue-43]
	_ = x[MemoryKindCadenceOptionalValue-44]
	_ = x[MemoryKindCadenceBoolValue-45]
	_ = x[MemoryKindCadenceStringValue-46]
	_ = x[MemoryKindCadenceCharacterValue-47]
	_ = x[MemoryKindCadenceAddressValue-48]
	_ = x[MemoryKindCadenceIntValue-49]
	_ = x[MemoryKindCadenceNumberValue-50]
	_ = x[MemoryKindCadenceArrayValueBase-51]
	_ = x[MemoryKindCadenceArrayValueLength-52]
	_ = x[MemoryKindCadenceDictionaryValue-53]
	_ = x[MemoryKindCadenceKeyValuePair-54]
	_ = x[MemoryKindCadenceStructValueBase-55]
	_ = x[MemoryKindCadenceStructValueSize-56]
	_ = x[MemoryKindCadenceResourceValueBase-57]
	_ = x[MemoryKindCadenceAttachmentValueBase-58]
	_ = x[MemoryKindCadenceResourceValueSize-59]
	_ = x[MemoryKindCadenceAttachmentValueSize-60]
	_ = x[MemoryKindCadenceEventValueBase-61]
	_ = x[MemoryKindCadenceEventValueSize-62]
	_ = x[MemoryKindCadenceContractValueBase-63]
	_ = x[MemoryKindCadenceContractValueSize-64]
	_ = x[MemoryKindCadenceEnumValueBase-65]
	_ = x[MemoryKindCadenceEnumValueSize-66]
	_ = x[MemoryKindCadencePathLinkValue-67]
	_ = x[MemoryKindCadencePathValue-68]
	_ = x[MemoryKindCadenceTypeValue-69]
	_ = x[MemoryKindCadenceStorageCapabilityValue-70]
	_ = x[MemoryKindCadenceFunctionValue-71]
	_ = x[MemoryKindCadenceOptionalType-72]
	_ = x[MemoryKindCadenceVariableSizedArrayType-73]
	_ = x[MemoryKindCadenceConstantSizedArrayType-74]
	_ = x[MemoryKindCadenceDictionaryType-75]
	_ = x[MemoryKindCadenceField-76]
	_ = x[MemoryKindCadenceParameter-77]
	_ = x[MemoryKindCadenceStructType-78]
	_ = x[MemoryKindCadenceResourceType-79]
	_ = x[MemoryKindCadenceAttachmentType-80]
	_ = x[MemoryKindCadenceEventType-81]
	_ = x[MemoryKindCadenceContractType-82]
	_ = x[MemoryKindCadenceStructInterfaceType-83]
	_ = x[MemoryKindCadenceResourceInterfaceType-84]
	_ = x[MemoryKindCadenceContractInterfaceType-85]
	_ = x[MemoryKindCadenceFunctionType-86]
	_ = x[MemoryKindCadenceReferenceType-87]
	_ = x[MemoryKindCadenceRestrictedType-88]
	_ = x[MemoryKindCadenceCapabilityType-89]
	_ = x[MemoryKindCadenceEnumType-90]
	_ = x[MemoryKindRawString-91]
	_ = x[MemoryKindAddressLocation-92]
	_ = x[MemoryKindBytes-93]
	_ = x[MemoryKindVariable-94]
	_ = x[MemoryKindCompositeTypeInfo-95]
	_ = x[MemoryKindCompositeField-96]
	_ = x[MemoryKindInvocation-97]
	_ = x[MemoryKindStorageMap-98]
	_ = x[MemoryKindStorageKey-99]
	_ = x[MemoryKindTypeToken-100]
	_ = x[MemoryKindErrorToken-101]
	_ = x[MemoryKindSpaceToken-102]
	_ = x[MemoryKindProgram-103]
	_ = x[MemoryKindIdentifier-104]
	_ = x[MemoryKindArgument-105]
	_ = x[MemoryKindBlock-106]
	_ = x[MemoryKindFunctionBlock-107]
	_ = x[MemoryKindParameter-108]
	_ = x[MemoryKindParameterList-109]
	_ = x[MemoryKindTypeParameter-110]
	_ = x[MemoryKindTypeParameterList-111]
	_ = x[MemoryKindTransfer-112]
	_ = x[MemoryKindMembers-113]
	_ = x[MemoryKindTypeAnnotation-114]
	_ = x[MemoryKindDictionaryEntry-115]
	_ = x[MemoryKindFunctionDeclaration-116]
	_ = x[MemoryKindCompositeDeclaration-117]
	_ = x[MemoryKindAttachmentDeclaration-118]
	_ = x[MemoryKindInterfaceDeclaration-119]
	_ = x[MemoryKindEnumCaseDeclaration-120]
	_ = x[MemoryKindFieldDeclaration-121]
	_ = x[MemoryKindTransactionDeclaration-122]
	_ = x[MemoryKindImportDeclaration-123]
	_ = x[MemoryKindVariableDeclaration-124]
	_ = x[MemoryKindSpecialFunctionDeclaration-125]
	_ = x[MemoryKindPragmaDeclaration-126]
	_ = x[MemoryKindAssignmentStatement-127]
	_ = x[MemoryKindBreakStatement-128]
	_ = x[MemoryKindContinueStatement-129]
	_ = x[MemoryKindEmitStatement-130]
	_ = x[MemoryKindExpressionStatement-131]
	_ = x[MemoryKindForStatement-132]
	_ = x[MemoryKindIfStatement-133]
	_ = x[MemoryKindReturnStatement-134]
	_ = x[MemoryKindSwapStatement-135]
	_ = x[MemoryKindSwitchStatement-136]
	_ = x[MemoryKindWhileStatement-137]
	_ = x[MemoryKindRemoveStatement-138]
	_ = x[MemoryKindBooleanExpression-139]
	_ = x[MemoryKindVoidExpression-140]
	_ = x[MemoryKindNilExpression-141]
	_ = x[MemoryKindStringExpression-142]
	_ = x[MemoryKindIntegerExpression-143]
	_ = x[MemoryKindFixedPointExpression-144]
	_ = x[MemoryKindArrayExpression-145]
	_ = x[MemoryKindDictionaryExpression-146]
	_ = x[MemoryKindIdentifierExpression-147]
	_ = x[MemoryKindInvocationExpression-148]
	_ = x[MemoryKindMemberExpression-149]
	_ = x[MemoryKindIndexExpression-150]
	_ = x[MemoryKindConditionalExpression-151]
	_ = x[MemoryKindUnaryExpression-152]
	_ = x[MemoryKindBinaryExpression-153]
	_ = x[MemoryKindFunctionExpression-154]
	_ = x[MemoryKindCastingExpression-155]
	_ = x[MemoryKindCreateExpression-156]
	_ = x[MemoryKindDestroyExpression-157]
	_ = x[MemoryKindReferenceExpression-158]
	_ = x[MemoryKindForceExpression-159]
	_ = x[MemoryKindPathExpression-160]
	_ = x[MemoryKindAttachExpression-161]
	_ = x[MemoryKindConstantSizedType-162]
	_ = x[MemoryKindDictionaryType-163]
	_ = x[MemoryKindFunctionType-164]
	_ = x[MemoryKindInstantiationType-165]
	_ = x[MemoryKindNominalType-166]
	_ = x[MemoryKindOptionalType-167]
	_ = x[MemoryKindReferenceType-168]
	_ = x[MemoryKindRestrictedType-169]
	_ = x[MemoryKindVariableSizedType-170]
	_ = x[MemoryKindPosition-171]
	_ = x[MemoryKindRange-172]
	_ = x[MemoryKindElaboration-173]
	_ = x[MemoryKindActivation-174]
	_ = x[MemoryKindActivationEntries-175]
	_ = x[MemoryKindVariableSizedSemaType-176]
	_ = x[MemoryKindConstantSizedSemaType-177]
	_ = x[MemoryKindDictionarySemaType-178]
	_ = x[MemoryKindOptionalSemaType-179]
	_ = x[MemoryKindRestrictedSemaType-180]
	_ = x[MemoryKindReferenceSemaType-181]
	_ = x[MemoryKindCapabilitySemaType-182]
	_ = x[MemoryKindOrderedMap-183]
	_ = x[MemoryKindOrderedMapEntryList-184]
	_ = x[MemoryKindOrderedMapEntry-185]
	_ = x[MemoryKindLast-186]
}

const _MemoryKind_name = "UnknownAddressValueStringValueCharacterValueNumberValueArrayValueBaseDictionaryValueBaseCompositeValueBaseSimpleCompositeValueBaseOptionalValueTypeValuePathValueStorageCapabilityValuePathLinkValueAccountLinkValueStorageReferenceValueAccountReferenceValueEphemeralReferenceValueInterpretedFunctionValueHostFunctionValueBoundFunctionValueBigIntSimpleCompositeValuePublishedValueAtreeArrayDataSlabAtreeArrayMetaDataSlabAtreeArrayElementOverheadAtreeMapDataSlabAtreeMapMetaDataSlabAtreeMapElementOverheadAtreeMapPreAllocatedElementAtreeEncodedSlabPrimitiveStaticTypeCompositeStaticTypeInterfaceStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeOptionalStaticTypeRestrictedStaticTypeReferenceStaticTypeCapabilityStaticTypeFunctionStaticTypeCadenceVoidValueCadenceOptionalValueCadenceBoolValueCadenceStringValueCadenceCharacterValueCadenceAddressValueCadenceIntValueCadenceNumberValueCadenceArrayValueBaseCadenceArrayValueLengthCadenceDictionaryValueCadenceKeyValuePairCadenceStructValueBaseCadenceStructValueSizeCadenceResourceValueBaseCadenceAttachmentValueBaseCadenceResourceValueSizeCadenceAttachmentValueSizeCadenceEventValueBaseCadenceEventValueSizeCadenceContractValueBaseCadenceContractValueSizeCadenceEnumValueBaseCadenceEnumValueSizeCadencePathLinkValueCadencePathValueCadenceTypeValueCadenceStorageCapabilityValueCadenceFunctionValueCadenceOptionalTypeCadenceVariableSizedArrayTypeCadenceConstantSizedArrayTypeCadenceDictionaryTypeCadenceFieldCadenceParameterCadenceStructTypeCadenceResourceTypeCadenceAttachmentTypeCadenceEventTypeCadenceContractTypeCadenceStructInterfaceTypeCadenceResourceInterfaceTypeCadenceContractInterfaceTypeCadenceFunctionTypeCadenceReferenceTypeCadenceRestrictedTypeCadenceCapabilityTypeCadenceEnumTypeRawStringAddressLocationBytesVariableCompositeTypeInfoCompositeFieldInvocationStorageMapStorageKeyTypeTokenErrorTokenSpaceTokenProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTypeParameterTypeParameterListTransferMembersTypeAnnotationDictionaryEntryFunctionDeclarationCompositeDeclarationAttachmentDeclarationInterfaceDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementRemoveStatementBooleanExpressionVoidExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionAttachExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeRestrictedTypeVariableSizedTypePositionRangeElaborationActivationActivationEntriesVariableSizedSemaTypeConstantSizedSemaTypeDictionarySemaTypeOptionalSemaTypeRestrictedSemaTypeReferenceSemaTypeCapabilitySemaTypeOrderedMapOrderedMapEntryListOrderedMapEntryLast"

var _MemoryKind_index = [...]uint16{0, 7, 19, 30, 44, 55, 69, 88, 106, 130, 143, 152, 161, 183, 196, 212, 233, 254, 277, 301, 318, 336, 342, 362, 376, 394, 416, 441, 457, 477, 500, 527, 543, 562, 581, 600, 623, 646, 666, 684, 704, 723, 743, 761, 777, 797, 813, 831, 852, 871, 886, 904, 925, 948, 970, 989, 1011, 1033, 1057, 1083, 1107, 1133, 1154, 1175, 1199, 1223, 1243, 1263, 1283, 1299, 1315, 1344, 1364, 1383, 1412, 1441, 1462, 1474, 1490, 1507, 1526, 1547, 1563, 1582, 1608, 1636, 1664, 1683, 1703, 1724, 1745, 1760, 1769, 1784, 1789, 1797, 1814, 1828, 1838, 1848, 1858, 1867, 1877, 1887, 1894, 1904, 1912, 1917, 1930, 1939, 1952, 1965, 1982, 1990, 1997, 2011, 2026, 2045, 2065, 2086, 2106, 2125, 2141, 2163, 2180, 2199, 2225, 2242, 2261, 2275, 2292, 2305, 2324, 2336, 2347, 2362, 2375, 2390, 2404, 2419, 2436, 2450, 2463, 2479, 2496, 2516, 2531, 2551, 2571, 2591, 2607, 2622, 2643, 2658, 2674, 2692, 2709, 2725, 2742, 2761, 2776, 2790, 2806, 2823, 2837, 2849, 2866, 2877, 2889, 2902, 2916, 2933, 2941, 2946, 2957, 2967, 2984, 3005, 3026, 3044, 3060, 3078, 3095, 3113, 3123, 3142, 3157, 3161}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
