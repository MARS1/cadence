// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindAddressValue-1]
	_ = x[MemoryKindStringValue-2]
	_ = x[MemoryKindCharacterValue-3]
	_ = x[MemoryKindNumberValue-4]
	_ = x[MemoryKindArrayValueBase-5]
	_ = x[MemoryKindDictionaryValueBase-6]
	_ = x[MemoryKindCompositeValueBase-7]
	_ = x[MemoryKindSimpleCompositeValueBase-8]
	_ = x[MemoryKindOptionalValue-9]
	_ = x[MemoryKindTypeValue-10]
	_ = x[MemoryKindPathValue-11]
	_ = x[MemoryKindCapabilityValue-12]
	_ = x[MemoryKindStorageReferenceValue-13]
	_ = x[MemoryKindAccountReferenceValue-14]
	_ = x[MemoryKindEphemeralReferenceValue-15]
	_ = x[MemoryKindInterpretedFunctionValue-16]
	_ = x[MemoryKindHostFunctionValue-17]
	_ = x[MemoryKindBoundFunctionValue-18]
	_ = x[MemoryKindBigInt-19]
	_ = x[MemoryKindSimpleCompositeValue-20]
	_ = x[MemoryKindPublishedValue-21]
	_ = x[MemoryKindStorageCapabilityControllerValue-22]
	_ = x[MemoryKindAccountCapabilityControllerValue-23]
	_ = x[MemoryKindAtreeArrayDataSlab-24]
	_ = x[MemoryKindAtreeArrayMetaDataSlab-25]
	_ = x[MemoryKindAtreeArrayElementOverhead-26]
	_ = x[MemoryKindAtreeMapDataSlab-27]
	_ = x[MemoryKindAtreeMapMetaDataSlab-28]
	_ = x[MemoryKindAtreeMapElementOverhead-29]
	_ = x[MemoryKindAtreeMapPreAllocatedElement-30]
	_ = x[MemoryKindAtreeEncodedSlab-31]
	_ = x[MemoryKindPrimitiveStaticType-32]
	_ = x[MemoryKindCompositeStaticType-33]
	_ = x[MemoryKindInterfaceStaticType-34]
	_ = x[MemoryKindVariableSizedStaticType-35]
	_ = x[MemoryKindConstantSizedStaticType-36]
	_ = x[MemoryKindDictionaryStaticType-37]
	_ = x[MemoryKindOptionalStaticType-38]
	_ = x[MemoryKindIntersectionStaticType-39]
	_ = x[MemoryKindEntitlementSetStaticAccess-40]
	_ = x[MemoryKindEntitlementMapStaticAccess-41]
	_ = x[MemoryKindReferenceStaticType-42]
	_ = x[MemoryKindCapabilityStaticType-43]
	_ = x[MemoryKindFunctionStaticType-44]
	_ = x[MemoryKindCadenceVoidValue-45]
	_ = x[MemoryKindCadenceOptionalValue-46]
	_ = x[MemoryKindCadenceBoolValue-47]
	_ = x[MemoryKindCadenceStringValue-48]
	_ = x[MemoryKindCadenceCharacterValue-49]
	_ = x[MemoryKindCadenceAddressValue-50]
	_ = x[MemoryKindCadenceIntValue-51]
	_ = x[MemoryKindCadenceNumberValue-52]
	_ = x[MemoryKindCadenceArrayValueBase-53]
	_ = x[MemoryKindCadenceArrayValueLength-54]
	_ = x[MemoryKindCadenceDictionaryValue-55]
	_ = x[MemoryKindCadenceKeyValuePair-56]
	_ = x[MemoryKindCadenceStructValueBase-57]
	_ = x[MemoryKindCadenceStructValueSize-58]
	_ = x[MemoryKindCadenceResourceValueBase-59]
	_ = x[MemoryKindCadenceAttachmentValueBase-60]
	_ = x[MemoryKindCadenceResourceValueSize-61]
	_ = x[MemoryKindCadenceAttachmentValueSize-62]
	_ = x[MemoryKindCadenceEventValueBase-63]
	_ = x[MemoryKindCadenceEventValueSize-64]
	_ = x[MemoryKindCadenceContractValueBase-65]
	_ = x[MemoryKindCadenceContractValueSize-66]
	_ = x[MemoryKindCadenceEnumValueBase-67]
	_ = x[MemoryKindCadenceEnumValueSize-68]
	_ = x[MemoryKindCadencePathValue-69]
	_ = x[MemoryKindCadenceTypeValue-70]
	_ = x[MemoryKindCadenceCapabilityValue-71]
	_ = x[MemoryKindCadenceFunctionValue-72]
	_ = x[MemoryKindCadenceOptionalType-73]
	_ = x[MemoryKindCadenceVariableSizedArrayType-74]
	_ = x[MemoryKindCadenceConstantSizedArrayType-75]
	_ = x[MemoryKindCadenceDictionaryType-76]
	_ = x[MemoryKindCadenceField-77]
	_ = x[MemoryKindCadenceParameter-78]
	_ = x[MemoryKindCadenceTypeParameter-79]
	_ = x[MemoryKindCadenceStructType-80]
	_ = x[MemoryKindCadenceResourceType-81]
	_ = x[MemoryKindCadenceAttachmentType-82]
	_ = x[MemoryKindCadenceEventType-83]
	_ = x[MemoryKindCadenceContractType-84]
	_ = x[MemoryKindCadenceStructInterfaceType-85]
	_ = x[MemoryKindCadenceResourceInterfaceType-86]
	_ = x[MemoryKindCadenceContractInterfaceType-87]
	_ = x[MemoryKindCadenceFunctionType-88]
	_ = x[MemoryKindCadenceEntitlementSetAccess-89]
	_ = x[MemoryKindCadenceEntitlementMapAccess-90]
	_ = x[MemoryKindCadenceReferenceType-91]
	_ = x[MemoryKindCadenceIntersectionType-92]
	_ = x[MemoryKindCadenceCapabilityType-93]
	_ = x[MemoryKindCadenceEnumType-94]
	_ = x[MemoryKindRawString-95]
	_ = x[MemoryKindAddressLocation-96]
	_ = x[MemoryKindBytes-97]
	_ = x[MemoryKindVariable-98]
	_ = x[MemoryKindCompositeTypeInfo-99]
	_ = x[MemoryKindCompositeField-100]
	_ = x[MemoryKindInvocation-101]
	_ = x[MemoryKindStorageMap-102]
	_ = x[MemoryKindStorageKey-103]
	_ = x[MemoryKindTypeToken-104]
	_ = x[MemoryKindErrorToken-105]
	_ = x[MemoryKindSpaceToken-106]
	_ = x[MemoryKindProgram-107]
	_ = x[MemoryKindIdentifier-108]
	_ = x[MemoryKindArgument-109]
	_ = x[MemoryKindBlock-110]
	_ = x[MemoryKindFunctionBlock-111]
	_ = x[MemoryKindParameter-112]
	_ = x[MemoryKindParameterList-113]
	_ = x[MemoryKindTypeParameter-114]
	_ = x[MemoryKindTypeParameterList-115]
	_ = x[MemoryKindTransfer-116]
	_ = x[MemoryKindMembers-117]
	_ = x[MemoryKindTypeAnnotation-118]
	_ = x[MemoryKindDictionaryEntry-119]
	_ = x[MemoryKindFunctionDeclaration-120]
	_ = x[MemoryKindCompositeDeclaration-121]
	_ = x[MemoryKindAttachmentDeclaration-122]
	_ = x[MemoryKindInterfaceDeclaration-123]
	_ = x[MemoryKindEntitlementDeclaration-124]
	_ = x[MemoryKindEntitlementMappingElement-125]
	_ = x[MemoryKindEntitlementMappingDeclaration-126]
	_ = x[MemoryKindEnumCaseDeclaration-127]
	_ = x[MemoryKindFieldDeclaration-128]
	_ = x[MemoryKindTransactionDeclaration-129]
	_ = x[MemoryKindImportDeclaration-130]
	_ = x[MemoryKindVariableDeclaration-131]
	_ = x[MemoryKindSpecialFunctionDeclaration-132]
	_ = x[MemoryKindPragmaDeclaration-133]
	_ = x[MemoryKindAssignmentStatement-134]
	_ = x[MemoryKindBreakStatement-135]
	_ = x[MemoryKindContinueStatement-136]
	_ = x[MemoryKindEmitStatement-137]
	_ = x[MemoryKindExpressionStatement-138]
	_ = x[MemoryKindForStatement-139]
	_ = x[MemoryKindIfStatement-140]
	_ = x[MemoryKindReturnStatement-141]
	_ = x[MemoryKindSwapStatement-142]
	_ = x[MemoryKindSwitchStatement-143]
	_ = x[MemoryKindWhileStatement-144]
	_ = x[MemoryKindRemoveStatement-145]
	_ = x[MemoryKindBooleanExpression-146]
	_ = x[MemoryKindVoidExpression-147]
	_ = x[MemoryKindNilExpression-148]
	_ = x[MemoryKindStringExpression-149]
	_ = x[MemoryKindIntegerExpression-150]
	_ = x[MemoryKindFixedPointExpression-151]
	_ = x[MemoryKindArrayExpression-152]
	_ = x[MemoryKindDictionaryExpression-153]
	_ = x[MemoryKindIdentifierExpression-154]
	_ = x[MemoryKindInvocationExpression-155]
	_ = x[MemoryKindMemberExpression-156]
	_ = x[MemoryKindIndexExpression-157]
	_ = x[MemoryKindConditionalExpression-158]
	_ = x[MemoryKindUnaryExpression-159]
	_ = x[MemoryKindBinaryExpression-160]
	_ = x[MemoryKindFunctionExpression-161]
	_ = x[MemoryKindCastingExpression-162]
	_ = x[MemoryKindCreateExpression-163]
	_ = x[MemoryKindDestroyExpression-164]
	_ = x[MemoryKindReferenceExpression-165]
	_ = x[MemoryKindForceExpression-166]
	_ = x[MemoryKindPathExpression-167]
	_ = x[MemoryKindAttachExpression-168]
	_ = x[MemoryKindConstantSizedType-169]
	_ = x[MemoryKindDictionaryType-170]
	_ = x[MemoryKindFunctionType-171]
	_ = x[MemoryKindInstantiationType-172]
	_ = x[MemoryKindNominalType-173]
	_ = x[MemoryKindOptionalType-174]
	_ = x[MemoryKindReferenceType-175]
	_ = x[MemoryKindIntersectionType-176]
	_ = x[MemoryKindVariableSizedType-177]
	_ = x[MemoryKindPosition-178]
	_ = x[MemoryKindRange-179]
	_ = x[MemoryKindElaboration-180]
	_ = x[MemoryKindActivation-181]
	_ = x[MemoryKindActivationEntries-182]
	_ = x[MemoryKindVariableSizedSemaType-183]
	_ = x[MemoryKindConstantSizedSemaType-184]
	_ = x[MemoryKindDictionarySemaType-185]
	_ = x[MemoryKindOptionalSemaType-186]
	_ = x[MemoryKindIntersectionSemaType-187]
	_ = x[MemoryKindReferenceSemaType-188]
	_ = x[MemoryKindEntitlementSemaType-189]
	_ = x[MemoryKindEntitlementMapSemaType-190]
	_ = x[MemoryKindCapabilitySemaType-191]
	_ = x[MemoryKindOrderedMap-192]
	_ = x[MemoryKindOrderedMapEntryList-193]
	_ = x[MemoryKindOrderedMapEntry-194]
	_ = x[MemoryKindLast-195]
}

const _MemoryKind_name = "UnknownAddressValueStringValueCharacterValueNumberValueArrayValueBaseDictionaryValueBaseCompositeValueBaseSimpleCompositeValueBaseOptionalValueTypeValuePathValueCapabilityValueStorageReferenceValueAccountReferenceValueEphemeralReferenceValueInterpretedFunctionValueHostFunctionValueBoundFunctionValueBigIntSimpleCompositeValuePublishedValueStorageCapabilityControllerValueAccountCapabilityControllerValueAtreeArrayDataSlabAtreeArrayMetaDataSlabAtreeArrayElementOverheadAtreeMapDataSlabAtreeMapMetaDataSlabAtreeMapElementOverheadAtreeMapPreAllocatedElementAtreeEncodedSlabPrimitiveStaticTypeCompositeStaticTypeInterfaceStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeOptionalStaticTypeIntersectionStaticTypeEntitlementSetStaticAccessEntitlementMapStaticAccessReferenceStaticTypeCapabilityStaticTypeFunctionStaticTypeCadenceVoidValueCadenceOptionalValueCadenceBoolValueCadenceStringValueCadenceCharacterValueCadenceAddressValueCadenceIntValueCadenceNumberValueCadenceArrayValueBaseCadenceArrayValueLengthCadenceDictionaryValueCadenceKeyValuePairCadenceStructValueBaseCadenceStructValueSizeCadenceResourceValueBaseCadenceAttachmentValueBaseCadenceResourceValueSizeCadenceAttachmentValueSizeCadenceEventValueBaseCadenceEventValueSizeCadenceContractValueBaseCadenceContractValueSizeCadenceEnumValueBaseCadenceEnumValueSizeCadencePathValueCadenceTypeValueCadenceCapabilityValueCadenceFunctionValueCadenceOptionalTypeCadenceVariableSizedArrayTypeCadenceConstantSizedArrayTypeCadenceDictionaryTypeCadenceFieldCadenceParameterCadenceTypeParameterCadenceStructTypeCadenceResourceTypeCadenceAttachmentTypeCadenceEventTypeCadenceContractTypeCadenceStructInterfaceTypeCadenceResourceInterfaceTypeCadenceContractInterfaceTypeCadenceFunctionTypeCadenceEntitlementSetAccessCadenceEntitlementMapAccessCadenceReferenceTypeCadenceIntersectionTypeCadenceCapabilityTypeCadenceEnumTypeRawStringAddressLocationBytesVariableCompositeTypeInfoCompositeFieldInvocationStorageMapStorageKeyTypeTokenErrorTokenSpaceTokenProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTypeParameterTypeParameterListTransferMembersTypeAnnotationDictionaryEntryFunctionDeclarationCompositeDeclarationAttachmentDeclarationInterfaceDeclarationEntitlementDeclarationEntitlementMappingElementEntitlementMappingDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementRemoveStatementBooleanExpressionVoidExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionAttachExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeIntersectionTypeVariableSizedTypePositionRangeElaborationActivationActivationEntriesVariableSizedSemaTypeConstantSizedSemaTypeDictionarySemaTypeOptionalSemaTypeIntersectionSemaTypeReferenceSemaTypeEntitlementSemaTypeEntitlementMapSemaTypeCapabilitySemaTypeOrderedMapOrderedMapEntryListOrderedMapEntryLast"

var _MemoryKind_index = [...]uint16{0, 7, 19, 30, 44, 55, 69, 88, 106, 130, 143, 152, 161, 176, 197, 218, 241, 265, 282, 300, 306, 326, 340, 372, 404, 422, 444, 469, 485, 505, 528, 555, 571, 590, 609, 628, 651, 674, 694, 712, 734, 760, 786, 805, 825, 843, 859, 879, 895, 913, 934, 953, 968, 986, 1007, 1030, 1052, 1071, 1093, 1115, 1139, 1165, 1189, 1215, 1236, 1257, 1281, 1305, 1325, 1345, 1361, 1377, 1399, 1419, 1438, 1467, 1496, 1517, 1529, 1545, 1565, 1582, 1601, 1622, 1638, 1657, 1683, 1711, 1739, 1758, 1785, 1812, 1832, 1855, 1876, 1891, 1900, 1915, 1920, 1928, 1945, 1959, 1969, 1979, 1989, 1998, 2008, 2018, 2025, 2035, 2043, 2048, 2061, 2070, 2083, 2096, 2113, 2121, 2128, 2142, 2157, 2176, 2196, 2217, 2237, 2259, 2284, 2313, 2332, 2348, 2370, 2387, 2406, 2432, 2449, 2468, 2482, 2499, 2512, 2531, 2543, 2554, 2569, 2582, 2597, 2611, 2626, 2643, 2657, 2670, 2686, 2703, 2723, 2738, 2758, 2778, 2798, 2814, 2829, 2850, 2865, 2881, 2899, 2916, 2932, 2949, 2968, 2983, 2997, 3013, 3030, 3044, 3056, 3073, 3084, 3096, 3109, 3125, 3142, 3150, 3155, 3166, 3176, 3193, 3214, 3235, 3253, 3269, 3289, 3306, 3325, 3347, 3365, 3375, 3394, 3409, 3413}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
