// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindAddressValue-1]
	_ = x[MemoryKindStringValue-2]
	_ = x[MemoryKindCharacterValue-3]
	_ = x[MemoryKindNumberValue-4]
	_ = x[MemoryKindArrayValueBase-5]
	_ = x[MemoryKindDictionaryValueBase-6]
	_ = x[MemoryKindCompositeValueBase-7]
	_ = x[MemoryKindSimpleCompositeValueBase-8]
	_ = x[MemoryKindOptionalValue-9]
	_ = x[MemoryKindTypeValue-10]
	_ = x[MemoryKindPathValue-11]
	_ = x[MemoryKindStorageCapabilityValue-12]
	_ = x[MemoryKindPathLinkValue-13]
	_ = x[MemoryKindAccountLinkValue-14]
	_ = x[MemoryKindStorageReferenceValue-15]
	_ = x[MemoryKindAccountReferenceValue-16]
	_ = x[MemoryKindEphemeralReferenceValue-17]
	_ = x[MemoryKindInterpretedFunctionValue-18]
	_ = x[MemoryKindHostFunctionValue-19]
	_ = x[MemoryKindBoundFunctionValue-20]
	_ = x[MemoryKindBigInt-21]
	_ = x[MemoryKindSimpleCompositeValue-22]
	_ = x[MemoryKindPublishedValue-23]
	_ = x[MemoryKindAtreeArrayDataSlab-24]
	_ = x[MemoryKindAtreeArrayMetaDataSlab-25]
	_ = x[MemoryKindAtreeArrayElementOverhead-26]
	_ = x[MemoryKindAtreeMapDataSlab-27]
	_ = x[MemoryKindAtreeMapMetaDataSlab-28]
	_ = x[MemoryKindAtreeMapElementOverhead-29]
	_ = x[MemoryKindAtreeMapPreAllocatedElement-30]
	_ = x[MemoryKindAtreeEncodedSlab-31]
	_ = x[MemoryKindPrimitiveStaticType-32]
	_ = x[MemoryKindCompositeStaticType-33]
	_ = x[MemoryKindInterfaceStaticType-34]
	_ = x[MemoryKindVariableSizedStaticType-35]
	_ = x[MemoryKindConstantSizedStaticType-36]
	_ = x[MemoryKindDictionaryStaticType-37]
	_ = x[MemoryKindOptionalStaticType-38]
	_ = x[MemoryKindRestrictedStaticType-39]
	_ = x[MemoryKindReferenceStaticType-40]
	_ = x[MemoryKindCapabilityStaticType-41]
	_ = x[MemoryKindFunctionStaticType-42]
	_ = x[MemoryKindCadenceVoidValue-43]
	_ = x[MemoryKindCadenceOptionalValue-44]
	_ = x[MemoryKindCadenceBoolValue-45]
	_ = x[MemoryKindCadenceStringValue-46]
	_ = x[MemoryKindCadenceCharacterValue-47]
	_ = x[MemoryKindCadenceAddressValue-48]
	_ = x[MemoryKindCadenceIntValue-49]
	_ = x[MemoryKindCadenceNumberValue-50]
	_ = x[MemoryKindCadenceArrayValueBase-51]
	_ = x[MemoryKindCadenceArrayValueLength-52]
	_ = x[MemoryKindCadenceDictionaryValue-53]
	_ = x[MemoryKindCadenceKeyValuePair-54]
	_ = x[MemoryKindCadenceStructValueBase-55]
	_ = x[MemoryKindCadenceStructValueSize-56]
	_ = x[MemoryKindCadenceResourceValueBase-57]
	_ = x[MemoryKindCadenceAttachmentValueBase-58]
	_ = x[MemoryKindCadenceResourceValueSize-59]
	_ = x[MemoryKindCadenceAttachmentValueSize-60]
	_ = x[MemoryKindCadenceEventValueBase-61]
	_ = x[MemoryKindCadenceEventValueSize-62]
	_ = x[MemoryKindCadenceContractValueBase-63]
	_ = x[MemoryKindCadenceContractValueSize-64]
	_ = x[MemoryKindCadenceEnumValueBase-65]
	_ = x[MemoryKindCadenceEnumValueSize-66]
	_ = x[MemoryKindCadencePathLinkValue-67]
	_ = x[MemoryKindCadenceAccountLinkValue-68]
	_ = x[MemoryKindCadencePathValue-69]
	_ = x[MemoryKindCadenceTypeValue-70]
	_ = x[MemoryKindCadenceStorageCapabilityValue-71]
	_ = x[MemoryKindCadenceFunctionValue-72]
	_ = x[MemoryKindCadenceOptionalType-73]
	_ = x[MemoryKindCadenceVariableSizedArrayType-74]
	_ = x[MemoryKindCadenceConstantSizedArrayType-75]
	_ = x[MemoryKindCadenceDictionaryType-76]
	_ = x[MemoryKindCadenceField-77]
	_ = x[MemoryKindCadenceParameter-78]
	_ = x[MemoryKindCadenceTypeParameter-79]
	_ = x[MemoryKindCadenceStructType-80]
	_ = x[MemoryKindCadenceResourceType-81]
	_ = x[MemoryKindCadenceAttachmentType-82]
	_ = x[MemoryKindCadenceEventType-83]
	_ = x[MemoryKindCadenceContractType-84]
	_ = x[MemoryKindCadenceStructInterfaceType-85]
	_ = x[MemoryKindCadenceResourceInterfaceType-86]
	_ = x[MemoryKindCadenceContractInterfaceType-87]
	_ = x[MemoryKindCadenceFunctionType-88]
	_ = x[MemoryKindCadenceReferenceType-89]
	_ = x[MemoryKindCadenceRestrictedType-90]
	_ = x[MemoryKindCadenceCapabilityType-91]
	_ = x[MemoryKindCadenceEnumType-92]
	_ = x[MemoryKindRawString-93]
	_ = x[MemoryKindAddressLocation-94]
	_ = x[MemoryKindBytes-95]
	_ = x[MemoryKindVariable-96]
	_ = x[MemoryKindCompositeTypeInfo-97]
	_ = x[MemoryKindCompositeField-98]
	_ = x[MemoryKindInvocation-99]
	_ = x[MemoryKindStorageMap-100]
	_ = x[MemoryKindStorageKey-101]
	_ = x[MemoryKindTypeToken-102]
	_ = x[MemoryKindErrorToken-103]
	_ = x[MemoryKindSpaceToken-104]
	_ = x[MemoryKindProgram-105]
	_ = x[MemoryKindIdentifier-106]
	_ = x[MemoryKindArgument-107]
	_ = x[MemoryKindBlock-108]
	_ = x[MemoryKindFunctionBlock-109]
	_ = x[MemoryKindParameter-110]
	_ = x[MemoryKindParameterList-111]
	_ = x[MemoryKindTypeParameter-112]
	_ = x[MemoryKindTypeParameterList-113]
	_ = x[MemoryKindTransfer-114]
	_ = x[MemoryKindMembers-115]
	_ = x[MemoryKindTypeAnnotation-116]
	_ = x[MemoryKindDictionaryEntry-117]
	_ = x[MemoryKindFunctionDeclaration-118]
	_ = x[MemoryKindCompositeDeclaration-119]
	_ = x[MemoryKindAttachmentDeclaration-120]
	_ = x[MemoryKindInterfaceDeclaration-121]
	_ = x[MemoryKindEntitlementDeclaration-122]
	_ = x[MemoryKindEntitlementMappingElement-123]
	_ = x[MemoryKindEntitlementMappingDeclaration-124]
	_ = x[MemoryKindEnumCaseDeclaration-125]
	_ = x[MemoryKindFieldDeclaration-126]
	_ = x[MemoryKindTransactionDeclaration-127]
	_ = x[MemoryKindImportDeclaration-128]
	_ = x[MemoryKindVariableDeclaration-129]
	_ = x[MemoryKindSpecialFunctionDeclaration-130]
	_ = x[MemoryKindPragmaDeclaration-131]
	_ = x[MemoryKindAssignmentStatement-132]
	_ = x[MemoryKindBreakStatement-133]
	_ = x[MemoryKindContinueStatement-134]
	_ = x[MemoryKindEmitStatement-135]
	_ = x[MemoryKindExpressionStatement-136]
	_ = x[MemoryKindForStatement-137]
	_ = x[MemoryKindIfStatement-138]
	_ = x[MemoryKindReturnStatement-139]
	_ = x[MemoryKindSwapStatement-140]
	_ = x[MemoryKindSwitchStatement-141]
	_ = x[MemoryKindWhileStatement-142]
	_ = x[MemoryKindRemoveStatement-143]
	_ = x[MemoryKindBooleanExpression-144]
	_ = x[MemoryKindVoidExpression-145]
	_ = x[MemoryKindNilExpression-146]
	_ = x[MemoryKindStringExpression-147]
	_ = x[MemoryKindIntegerExpression-148]
	_ = x[MemoryKindFixedPointExpression-149]
	_ = x[MemoryKindArrayExpression-150]
	_ = x[MemoryKindDictionaryExpression-151]
	_ = x[MemoryKindIdentifierExpression-152]
	_ = x[MemoryKindInvocationExpression-153]
	_ = x[MemoryKindMemberExpression-154]
	_ = x[MemoryKindIndexExpression-155]
	_ = x[MemoryKindConditionalExpression-156]
	_ = x[MemoryKindUnaryExpression-157]
	_ = x[MemoryKindBinaryExpression-158]
	_ = x[MemoryKindFunctionExpression-159]
	_ = x[MemoryKindCastingExpression-160]
	_ = x[MemoryKindCreateExpression-161]
	_ = x[MemoryKindDestroyExpression-162]
	_ = x[MemoryKindReferenceExpression-163]
	_ = x[MemoryKindForceExpression-164]
	_ = x[MemoryKindPathExpression-165]
	_ = x[MemoryKindAttachExpression-166]
	_ = x[MemoryKindConstantSizedType-167]
	_ = x[MemoryKindDictionaryType-168]
	_ = x[MemoryKindFunctionType-169]
	_ = x[MemoryKindInstantiationType-170]
	_ = x[MemoryKindNominalType-171]
	_ = x[MemoryKindOptionalType-172]
	_ = x[MemoryKindReferenceType-173]
	_ = x[MemoryKindRestrictedType-174]
	_ = x[MemoryKindVariableSizedType-175]
	_ = x[MemoryKindPosition-176]
	_ = x[MemoryKindRange-177]
	_ = x[MemoryKindElaboration-178]
	_ = x[MemoryKindActivation-179]
	_ = x[MemoryKindActivationEntries-180]
	_ = x[MemoryKindVariableSizedSemaType-181]
	_ = x[MemoryKindConstantSizedSemaType-182]
	_ = x[MemoryKindDictionarySemaType-183]
	_ = x[MemoryKindOptionalSemaType-184]
	_ = x[MemoryKindRestrictedSemaType-185]
	_ = x[MemoryKindReferenceSemaType-186]
	_ = x[MemoryKindCapabilitySemaType-187]
	_ = x[MemoryKindOrderedMap-188]
	_ = x[MemoryKindOrderedMapEntryList-189]
	_ = x[MemoryKindOrderedMapEntry-190]
	_ = x[MemoryKindLast-191]
}

const _MemoryKind_name = "UnknownAddressValueStringValueCharacterValueNumberValueArrayValueBaseDictionaryValueBaseCompositeValueBaseSimpleCompositeValueBaseOptionalValueTypeValuePathValueStorageCapabilityValuePathLinkValueAccountLinkValueStorageReferenceValueAccountReferenceValueEphemeralReferenceValueInterpretedFunctionValueHostFunctionValueBoundFunctionValueBigIntSimpleCompositeValuePublishedValueAtreeArrayDataSlabAtreeArrayMetaDataSlabAtreeArrayElementOverheadAtreeMapDataSlabAtreeMapMetaDataSlabAtreeMapElementOverheadAtreeMapPreAllocatedElementAtreeEncodedSlabPrimitiveStaticTypeCompositeStaticTypeInterfaceStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeOptionalStaticTypeRestrictedStaticTypeReferenceStaticTypeCapabilityStaticTypeFunctionStaticTypeCadenceVoidValueCadenceOptionalValueCadenceBoolValueCadenceStringValueCadenceCharacterValueCadenceAddressValueCadenceIntValueCadenceNumberValueCadenceArrayValueBaseCadenceArrayValueLengthCadenceDictionaryValueCadenceKeyValuePairCadenceStructValueBaseCadenceStructValueSizeCadenceResourceValueBaseCadenceAttachmentValueBaseCadenceResourceValueSizeCadenceAttachmentValueSizeCadenceEventValueBaseCadenceEventValueSizeCadenceContractValueBaseCadenceContractValueSizeCadenceEnumValueBaseCadenceEnumValueSizeCadencePathLinkValueCadenceAccountLinkValueCadencePathValueCadenceTypeValueCadenceStorageCapabilityValueCadenceFunctionValueCadenceOptionalTypeCadenceVariableSizedArrayTypeCadenceConstantSizedArrayTypeCadenceDictionaryTypeCadenceFieldCadenceParameterCadenceTypeParameterCadenceStructTypeCadenceResourceTypeCadenceAttachmentTypeCadenceEventTypeCadenceContractTypeCadenceStructInterfaceTypeCadenceResourceInterfaceTypeCadenceContractInterfaceTypeCadenceFunctionTypeCadenceReferenceTypeCadenceRestrictedTypeCadenceCapabilityTypeCadenceEnumTypeRawStringAddressLocationBytesVariableCompositeTypeInfoCompositeFieldInvocationStorageMapStorageKeyTypeTokenErrorTokenSpaceTokenProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTypeParameterTypeParameterListTransferMembersTypeAnnotationDictionaryEntryFunctionDeclarationCompositeDeclarationAttachmentDeclarationInterfaceDeclarationEntitlementDeclarationEntitlementMappingElementEntitlementMappingDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementRemoveStatementBooleanExpressionVoidExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionAttachExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeRestrictedTypeVariableSizedTypePositionRangeElaborationActivationActivationEntriesVariableSizedSemaTypeConstantSizedSemaTypeDictionarySemaTypeOptionalSemaTypeRestrictedSemaTypeReferenceSemaTypeCapabilitySemaTypeOrderedMapOrderedMapEntryListOrderedMapEntryLast"

var _MemoryKind_index = [...]uint16{0, 7, 19, 30, 44, 55, 69, 88, 106, 130, 143, 152, 161, 183, 196, 212, 233, 254, 277, 301, 318, 336, 342, 362, 376, 394, 416, 441, 457, 477, 500, 527, 543, 562, 581, 600, 623, 646, 666, 684, 704, 723, 743, 761, 777, 797, 813, 831, 852, 871, 886, 904, 925, 948, 970, 989, 1011, 1033, 1057, 1083, 1107, 1133, 1154, 1175, 1199, 1223, 1243, 1263, 1283, 1306, 1322, 1338, 1367, 1387, 1406, 1435, 1464, 1485, 1497, 1513, 1533, 1550, 1569, 1590, 1606, 1625, 1651, 1679, 1707, 1726, 1746, 1767, 1788, 1803, 1812, 1827, 1832, 1840, 1857, 1871, 1881, 1891, 1901, 1910, 1920, 1930, 1937, 1947, 1955, 1960, 1973, 1982, 1995, 2008, 2025, 2033, 2040, 2054, 2069, 2088, 2108, 2129, 2149, 2171, 2196, 2225, 2244, 2260, 2282, 2299, 2318, 2344, 2361, 2380, 2394, 2411, 2424, 2443, 2455, 2466, 2481, 2494, 2509, 2523, 2538, 2555, 2569, 2582, 2598, 2615, 2635, 2650, 2670, 2690, 2710, 2726, 2741, 2762, 2777, 2793, 2811, 2828, 2844, 2861, 2880, 2895, 2909, 2925, 2942, 2956, 2968, 2985, 2996, 3008, 3021, 3035, 3052, 3060, 3065, 3076, 3086, 3103, 3124, 3145, 3163, 3179, 3197, 3214, 3232, 3242, 3261, 3276, 3280}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
