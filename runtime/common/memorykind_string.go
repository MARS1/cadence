// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindAddressValue-1]
	_ = x[MemoryKindStringValue-2]
	_ = x[MemoryKindCharacterValue-3]
	_ = x[MemoryKindNumberValue-4]
	_ = x[MemoryKindArrayValueBase-5]
	_ = x[MemoryKindDictionaryValueBase-6]
	_ = x[MemoryKindCompositeValueBase-7]
	_ = x[MemoryKindSimpleCompositeValueBase-8]
	_ = x[MemoryKindOptionalValue-9]
	_ = x[MemoryKindTypeValue-10]
	_ = x[MemoryKindPathValue-11]
	_ = x[MemoryKindStorageCapabilityValue-12]
	_ = x[MemoryKindPathLinkValue-13]
	_ = x[MemoryKindAccountLinkValue-14]
	_ = x[MemoryKindStorageReferenceValue-15]
	_ = x[MemoryKindAccountReferenceValue-16]
	_ = x[MemoryKindEphemeralReferenceValue-17]
	_ = x[MemoryKindInterpretedFunctionValue-18]
	_ = x[MemoryKindHostFunctionValue-19]
	_ = x[MemoryKindBoundFunctionValue-20]
	_ = x[MemoryKindBigInt-21]
	_ = x[MemoryKindSimpleCompositeValue-22]
	_ = x[MemoryKindPublishedValue-23]
	_ = x[MemoryKindAtreeArrayDataSlab-24]
	_ = x[MemoryKindAtreeArrayMetaDataSlab-25]
	_ = x[MemoryKindAtreeArrayElementOverhead-26]
	_ = x[MemoryKindAtreeMapDataSlab-27]
	_ = x[MemoryKindAtreeMapMetaDataSlab-28]
	_ = x[MemoryKindAtreeMapElementOverhead-29]
	_ = x[MemoryKindAtreeMapPreAllocatedElement-30]
	_ = x[MemoryKindAtreeEncodedSlab-31]
	_ = x[MemoryKindPrimitiveStaticType-32]
	_ = x[MemoryKindCompositeStaticType-33]
	_ = x[MemoryKindInterfaceStaticType-34]
	_ = x[MemoryKindVariableSizedStaticType-35]
	_ = x[MemoryKindConstantSizedStaticType-36]
	_ = x[MemoryKindDictionaryStaticType-37]
	_ = x[MemoryKindOptionalStaticType-38]
	_ = x[MemoryKindRestrictedStaticType-39]
	_ = x[MemoryKindUnauthorizedStaticAccess-40]
	_ = x[MemoryKindEntitlementSetStaticAccess-41]
	_ = x[MemoryKindEntitlementMapStaticAccess-42]
	_ = x[MemoryKindReferenceStaticType-43]
	_ = x[MemoryKindCapabilityStaticType-44]
	_ = x[MemoryKindFunctionStaticType-45]
	_ = x[MemoryKindCadenceVoidValue-46]
	_ = x[MemoryKindCadenceOptionalValue-47]
	_ = x[MemoryKindCadenceBoolValue-48]
	_ = x[MemoryKindCadenceStringValue-49]
	_ = x[MemoryKindCadenceCharacterValue-50]
	_ = x[MemoryKindCadenceAddressValue-51]
	_ = x[MemoryKindCadenceIntValue-52]
	_ = x[MemoryKindCadenceNumberValue-53]
	_ = x[MemoryKindCadenceArrayValueBase-54]
	_ = x[MemoryKindCadenceArrayValueLength-55]
	_ = x[MemoryKindCadenceDictionaryValue-56]
	_ = x[MemoryKindCadenceKeyValuePair-57]
	_ = x[MemoryKindCadenceStructValueBase-58]
	_ = x[MemoryKindCadenceStructValueSize-59]
	_ = x[MemoryKindCadenceResourceValueBase-60]
	_ = x[MemoryKindCadenceAttachmentValueBase-61]
	_ = x[MemoryKindCadenceResourceValueSize-62]
	_ = x[MemoryKindCadenceAttachmentValueSize-63]
	_ = x[MemoryKindCadenceEventValueBase-64]
	_ = x[MemoryKindCadenceEventValueSize-65]
	_ = x[MemoryKindCadenceContractValueBase-66]
	_ = x[MemoryKindCadenceContractValueSize-67]
	_ = x[MemoryKindCadenceEnumValueBase-68]
	_ = x[MemoryKindCadenceEnumValueSize-69]
	_ = x[MemoryKindCadencePathLinkValue-70]
	_ = x[MemoryKindCadencePathValue-71]
	_ = x[MemoryKindCadenceTypeValue-72]
	_ = x[MemoryKindCadenceStorageCapabilityValue-73]
	_ = x[MemoryKindCadenceFunctionValue-74]
	_ = x[MemoryKindCadenceOptionalType-75]
	_ = x[MemoryKindCadenceVariableSizedArrayType-76]
	_ = x[MemoryKindCadenceConstantSizedArrayType-77]
	_ = x[MemoryKindCadenceDictionaryType-78]
	_ = x[MemoryKindCadenceField-79]
	_ = x[MemoryKindCadenceParameter-80]
	_ = x[MemoryKindCadenceStructType-81]
	_ = x[MemoryKindCadenceResourceType-82]
	_ = x[MemoryKindCadenceAttachmentType-83]
	_ = x[MemoryKindCadenceEventType-84]
	_ = x[MemoryKindCadenceContractType-85]
	_ = x[MemoryKindCadenceStructInterfaceType-86]
	_ = x[MemoryKindCadenceResourceInterfaceType-87]
	_ = x[MemoryKindCadenceContractInterfaceType-88]
	_ = x[MemoryKindCadenceFunctionType-89]
	_ = x[MemoryKindCadenceEntitlementSetAccess-90]
	_ = x[MemoryKindCadenceEntitlementMapAccess-91]
	_ = x[MemoryKindCadenceReferenceType-92]
	_ = x[MemoryKindCadenceRestrictedType-93]
	_ = x[MemoryKindCadenceCapabilityType-94]
	_ = x[MemoryKindCadenceEnumType-95]
	_ = x[MemoryKindRawString-96]
	_ = x[MemoryKindAddressLocation-97]
	_ = x[MemoryKindBytes-98]
	_ = x[MemoryKindVariable-99]
	_ = x[MemoryKindCompositeTypeInfo-100]
	_ = x[MemoryKindCompositeField-101]
	_ = x[MemoryKindInvocation-102]
	_ = x[MemoryKindStorageMap-103]
	_ = x[MemoryKindStorageKey-104]
	_ = x[MemoryKindTypeToken-105]
	_ = x[MemoryKindErrorToken-106]
	_ = x[MemoryKindSpaceToken-107]
	_ = x[MemoryKindProgram-108]
	_ = x[MemoryKindIdentifier-109]
	_ = x[MemoryKindArgument-110]
	_ = x[MemoryKindBlock-111]
	_ = x[MemoryKindFunctionBlock-112]
	_ = x[MemoryKindParameter-113]
	_ = x[MemoryKindParameterList-114]
	_ = x[MemoryKindTypeParameter-115]
	_ = x[MemoryKindTypeParameterList-116]
	_ = x[MemoryKindTransfer-117]
	_ = x[MemoryKindMembers-118]
	_ = x[MemoryKindTypeAnnotation-119]
	_ = x[MemoryKindDictionaryEntry-120]
	_ = x[MemoryKindFunctionDeclaration-121]
	_ = x[MemoryKindCompositeDeclaration-122]
	_ = x[MemoryKindAttachmentDeclaration-123]
	_ = x[MemoryKindInterfaceDeclaration-124]
	_ = x[MemoryKindEntitlementDeclaration-125]
	_ = x[MemoryKindEntitlementMappingElement-126]
	_ = x[MemoryKindEntitlementMappingDeclaration-127]
	_ = x[MemoryKindEnumCaseDeclaration-128]
	_ = x[MemoryKindFieldDeclaration-129]
	_ = x[MemoryKindTransactionDeclaration-130]
	_ = x[MemoryKindImportDeclaration-131]
	_ = x[MemoryKindVariableDeclaration-132]
	_ = x[MemoryKindSpecialFunctionDeclaration-133]
	_ = x[MemoryKindPragmaDeclaration-134]
	_ = x[MemoryKindAssignmentStatement-135]
	_ = x[MemoryKindBreakStatement-136]
	_ = x[MemoryKindContinueStatement-137]
	_ = x[MemoryKindEmitStatement-138]
	_ = x[MemoryKindExpressionStatement-139]
	_ = x[MemoryKindForStatement-140]
	_ = x[MemoryKindIfStatement-141]
	_ = x[MemoryKindReturnStatement-142]
	_ = x[MemoryKindSwapStatement-143]
	_ = x[MemoryKindSwitchStatement-144]
	_ = x[MemoryKindWhileStatement-145]
	_ = x[MemoryKindRemoveStatement-146]
	_ = x[MemoryKindBooleanExpression-147]
	_ = x[MemoryKindVoidExpression-148]
	_ = x[MemoryKindNilExpression-149]
	_ = x[MemoryKindStringExpression-150]
	_ = x[MemoryKindIntegerExpression-151]
	_ = x[MemoryKindFixedPointExpression-152]
	_ = x[MemoryKindArrayExpression-153]
	_ = x[MemoryKindDictionaryExpression-154]
	_ = x[MemoryKindIdentifierExpression-155]
	_ = x[MemoryKindInvocationExpression-156]
	_ = x[MemoryKindMemberExpression-157]
	_ = x[MemoryKindIndexExpression-158]
	_ = x[MemoryKindConditionalExpression-159]
	_ = x[MemoryKindUnaryExpression-160]
	_ = x[MemoryKindBinaryExpression-161]
	_ = x[MemoryKindFunctionExpression-162]
	_ = x[MemoryKindCastingExpression-163]
	_ = x[MemoryKindCreateExpression-164]
	_ = x[MemoryKindDestroyExpression-165]
	_ = x[MemoryKindReferenceExpression-166]
	_ = x[MemoryKindForceExpression-167]
	_ = x[MemoryKindPathExpression-168]
	_ = x[MemoryKindAttachExpression-169]
	_ = x[MemoryKindConstantSizedType-170]
	_ = x[MemoryKindDictionaryType-171]
	_ = x[MemoryKindFunctionType-172]
	_ = x[MemoryKindInstantiationType-173]
	_ = x[MemoryKindNominalType-174]
	_ = x[MemoryKindOptionalType-175]
	_ = x[MemoryKindReferenceType-176]
	_ = x[MemoryKindRestrictedType-177]
	_ = x[MemoryKindVariableSizedType-178]
	_ = x[MemoryKindPosition-179]
	_ = x[MemoryKindRange-180]
	_ = x[MemoryKindElaboration-181]
	_ = x[MemoryKindActivation-182]
	_ = x[MemoryKindActivationEntries-183]
	_ = x[MemoryKindVariableSizedSemaType-184]
	_ = x[MemoryKindConstantSizedSemaType-185]
	_ = x[MemoryKindDictionarySemaType-186]
	_ = x[MemoryKindOptionalSemaType-187]
	_ = x[MemoryKindRestrictedSemaType-188]
	_ = x[MemoryKindReferenceSemaType-189]
	_ = x[MemoryKindCapabilitySemaType-190]
	_ = x[MemoryKindOrderedMap-191]
	_ = x[MemoryKindOrderedMapEntryList-192]
	_ = x[MemoryKindOrderedMapEntry-193]
	_ = x[MemoryKindLast-194]
}

const _MemoryKind_name = "UnknownAddressValueStringValueCharacterValueNumberValueArrayValueBaseDictionaryValueBaseCompositeValueBaseSimpleCompositeValueBaseOptionalValueTypeValuePathValueStorageCapabilityValuePathLinkValueAccountLinkValueStorageReferenceValueAccountReferenceValueEphemeralReferenceValueInterpretedFunctionValueHostFunctionValueBoundFunctionValueBigIntSimpleCompositeValuePublishedValueAtreeArrayDataSlabAtreeArrayMetaDataSlabAtreeArrayElementOverheadAtreeMapDataSlabAtreeMapMetaDataSlabAtreeMapElementOverheadAtreeMapPreAllocatedElementAtreeEncodedSlabPrimitiveStaticTypeCompositeStaticTypeInterfaceStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeOptionalStaticTypeRestrictedStaticTypeUnauthorizedStaticAccessEntitlementSetStaticAccessEntitlementMapStaticAccessReferenceStaticTypeCapabilityStaticTypeFunctionStaticTypeCadenceVoidValueCadenceOptionalValueCadenceBoolValueCadenceStringValueCadenceCharacterValueCadenceAddressValueCadenceIntValueCadenceNumberValueCadenceArrayValueBaseCadenceArrayValueLengthCadenceDictionaryValueCadenceKeyValuePairCadenceStructValueBaseCadenceStructValueSizeCadenceResourceValueBaseCadenceAttachmentValueBaseCadenceResourceValueSizeCadenceAttachmentValueSizeCadenceEventValueBaseCadenceEventValueSizeCadenceContractValueBaseCadenceContractValueSizeCadenceEnumValueBaseCadenceEnumValueSizeCadencePathLinkValueCadencePathValueCadenceTypeValueCadenceStorageCapabilityValueCadenceFunctionValueCadenceOptionalTypeCadenceVariableSizedArrayTypeCadenceConstantSizedArrayTypeCadenceDictionaryTypeCadenceFieldCadenceParameterCadenceStructTypeCadenceResourceTypeCadenceAttachmentTypeCadenceEventTypeCadenceContractTypeCadenceStructInterfaceTypeCadenceResourceInterfaceTypeCadenceContractInterfaceTypeCadenceFunctionTypeCadenceEntitlementSetAccessCadenceEntitlementMapAccessCadenceReferenceTypeCadenceRestrictedTypeCadenceCapabilityTypeCadenceEnumTypeRawStringAddressLocationBytesVariableCompositeTypeInfoCompositeFieldInvocationStorageMapStorageKeyTypeTokenErrorTokenSpaceTokenProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTypeParameterTypeParameterListTransferMembersTypeAnnotationDictionaryEntryFunctionDeclarationCompositeDeclarationAttachmentDeclarationInterfaceDeclarationEntitlementDeclarationEntitlementMappingElementEntitlementMappingDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementRemoveStatementBooleanExpressionVoidExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionAttachExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeRestrictedTypeVariableSizedTypePositionRangeElaborationActivationActivationEntriesVariableSizedSemaTypeConstantSizedSemaTypeDictionarySemaTypeOptionalSemaTypeRestrictedSemaTypeReferenceSemaTypeCapabilitySemaTypeOrderedMapOrderedMapEntryListOrderedMapEntryLast"

var _MemoryKind_index = [...]uint16{0, 7, 19, 30, 44, 55, 69, 88, 106, 130, 143, 152, 161, 183, 196, 212, 233, 254, 277, 301, 318, 336, 342, 362, 376, 394, 416, 441, 457, 477, 500, 527, 543, 562, 581, 600, 623, 646, 666, 684, 704, 728, 754, 780, 799, 819, 837, 853, 873, 889, 907, 928, 947, 962, 980, 1001, 1024, 1046, 1065, 1087, 1109, 1133, 1159, 1183, 1209, 1230, 1251, 1275, 1299, 1319, 1339, 1359, 1375, 1391, 1420, 1440, 1459, 1488, 1517, 1538, 1550, 1566, 1583, 1602, 1623, 1639, 1658, 1684, 1712, 1740, 1759, 1786, 1813, 1833, 1854, 1875, 1890, 1899, 1914, 1919, 1927, 1944, 1958, 1968, 1978, 1988, 1997, 2007, 2017, 2024, 2034, 2042, 2047, 2060, 2069, 2082, 2095, 2112, 2120, 2127, 2141, 2156, 2175, 2195, 2216, 2236, 2258, 2283, 2312, 2331, 2347, 2369, 2386, 2405, 2431, 2448, 2467, 2481, 2498, 2511, 2530, 2542, 2553, 2568, 2581, 2596, 2610, 2625, 2642, 2656, 2669, 2685, 2702, 2722, 2737, 2757, 2777, 2797, 2813, 2828, 2849, 2864, 2880, 2898, 2915, 2931, 2948, 2967, 2982, 2996, 3012, 3029, 3043, 3055, 3072, 3083, 3095, 3108, 3122, 3139, 3147, 3152, 3163, 3173, 3190, 3211, 3232, 3250, 3266, 3284, 3301, 3319, 3329, 3348, 3363, 3367}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
