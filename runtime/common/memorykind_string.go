// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindAddressValue-1]
	_ = x[MemoryKindStringValue-2]
	_ = x[MemoryKindCharacterValue-3]
	_ = x[MemoryKindNumberValue-4]
	_ = x[MemoryKindArrayValueBase-5]
	_ = x[MemoryKindDictionaryValueBase-6]
	_ = x[MemoryKindCompositeValueBase-7]
	_ = x[MemoryKindSimpleCompositeValueBase-8]
	_ = x[MemoryKindOptionalValue-9]
	_ = x[MemoryKindTypeValue-10]
	_ = x[MemoryKindPathValue-11]
	_ = x[MemoryKindIDCapabilityValue-12]
	_ = x[MemoryKindPathCapabilityValue-13]
	_ = x[MemoryKindStorageReferenceValue-14]
	_ = x[MemoryKindAccountReferenceValue-15]
	_ = x[MemoryKindEphemeralReferenceValue-16]
	_ = x[MemoryKindInterpretedFunctionValue-17]
	_ = x[MemoryKindHostFunctionValue-18]
	_ = x[MemoryKindBoundFunctionValue-19]
	_ = x[MemoryKindBigInt-20]
	_ = x[MemoryKindSimpleCompositeValue-21]
	_ = x[MemoryKindPublishedValue-22]
	_ = x[MemoryKindStorageCapabilityControllerValue-23]
	_ = x[MemoryKindAccountCapabilityControllerValue-24]
	_ = x[MemoryKindAtreeArrayDataSlab-25]
	_ = x[MemoryKindAtreeArrayMetaDataSlab-26]
	_ = x[MemoryKindAtreeArrayElementOverhead-27]
	_ = x[MemoryKindAtreeMapDataSlab-28]
	_ = x[MemoryKindAtreeMapMetaDataSlab-29]
	_ = x[MemoryKindAtreeMapElementOverhead-30]
	_ = x[MemoryKindAtreeMapPreAllocatedElement-31]
	_ = x[MemoryKindAtreeEncodedSlab-32]
	_ = x[MemoryKindPrimitiveStaticType-33]
	_ = x[MemoryKindCompositeStaticType-34]
	_ = x[MemoryKindInterfaceStaticType-35]
	_ = x[MemoryKindVariableSizedStaticType-36]
	_ = x[MemoryKindConstantSizedStaticType-37]
	_ = x[MemoryKindDictionaryStaticType-38]
	_ = x[MemoryKindOptionalStaticType-39]
	_ = x[MemoryKindRestrictedStaticType-40]
	_ = x[MemoryKindReferenceStaticType-41]
	_ = x[MemoryKindCapabilityStaticType-42]
	_ = x[MemoryKindFunctionStaticType-43]
	_ = x[MemoryKindCadenceVoidValue-44]
	_ = x[MemoryKindCadenceOptionalValue-45]
	_ = x[MemoryKindCadenceBoolValue-46]
	_ = x[MemoryKindCadenceStringValue-47]
	_ = x[MemoryKindCadenceCharacterValue-48]
	_ = x[MemoryKindCadenceAddressValue-49]
	_ = x[MemoryKindCadenceIntValue-50]
	_ = x[MemoryKindCadenceNumberValue-51]
	_ = x[MemoryKindCadenceArrayValueBase-52]
	_ = x[MemoryKindCadenceArrayValueLength-53]
	_ = x[MemoryKindCadenceDictionaryValue-54]
	_ = x[MemoryKindCadenceKeyValuePair-55]
	_ = x[MemoryKindCadenceStructValueBase-56]
	_ = x[MemoryKindCadenceStructValueSize-57]
	_ = x[MemoryKindCadenceResourceValueBase-58]
	_ = x[MemoryKindCadenceAttachmentValueBase-59]
	_ = x[MemoryKindCadenceResourceValueSize-60]
	_ = x[MemoryKindCadenceAttachmentValueSize-61]
	_ = x[MemoryKindCadenceEventValueBase-62]
	_ = x[MemoryKindCadenceEventValueSize-63]
	_ = x[MemoryKindCadenceContractValueBase-64]
	_ = x[MemoryKindCadenceContractValueSize-65]
	_ = x[MemoryKindCadenceEnumValueBase-66]
	_ = x[MemoryKindCadenceEnumValueSize-67]
	_ = x[MemoryKindCadencePathValue-68]
	_ = x[MemoryKindCadenceTypeValue-69]
	_ = x[MemoryKindCadenceIDCapabilityValue-70]
	_ = x[MemoryKindCadencePathCapabilityValue-71]
	_ = x[MemoryKindCadenceFunctionValue-72]
	_ = x[MemoryKindCadenceOptionalType-73]
	_ = x[MemoryKindCadenceVariableSizedArrayType-74]
	_ = x[MemoryKindCadenceConstantSizedArrayType-75]
	_ = x[MemoryKindCadenceDictionaryType-76]
	_ = x[MemoryKindCadenceField-77]
	_ = x[MemoryKindCadenceParameter-78]
	_ = x[MemoryKindCadenceTypeParameter-79]
	_ = x[MemoryKindCadenceStructType-80]
	_ = x[MemoryKindCadenceResourceType-81]
	_ = x[MemoryKindCadenceAttachmentType-82]
	_ = x[MemoryKindCadenceEventType-83]
	_ = x[MemoryKindCadenceContractType-84]
	_ = x[MemoryKindCadenceStructInterfaceType-85]
	_ = x[MemoryKindCadenceResourceInterfaceType-86]
	_ = x[MemoryKindCadenceContractInterfaceType-87]
	_ = x[MemoryKindCadenceFunctionType-88]
	_ = x[MemoryKindCadenceReferenceType-89]
	_ = x[MemoryKindCadenceRestrictedType-90]
	_ = x[MemoryKindCadenceCapabilityType-91]
	_ = x[MemoryKindCadenceEnumType-92]
	_ = x[MemoryKindRawString-93]
	_ = x[MemoryKindAddressLocation-94]
	_ = x[MemoryKindBytes-95]
	_ = x[MemoryKindVariable-96]
	_ = x[MemoryKindCompositeTypeInfo-97]
	_ = x[MemoryKindCompositeField-98]
	_ = x[MemoryKindInvocation-99]
	_ = x[MemoryKindStorageMap-100]
	_ = x[MemoryKindStorageKey-101]
	_ = x[MemoryKindTypeToken-102]
	_ = x[MemoryKindErrorToken-103]
	_ = x[MemoryKindSpaceToken-104]
	_ = x[MemoryKindProgram-105]
	_ = x[MemoryKindIdentifier-106]
	_ = x[MemoryKindArgument-107]
	_ = x[MemoryKindBlock-108]
	_ = x[MemoryKindFunctionBlock-109]
	_ = x[MemoryKindParameter-110]
	_ = x[MemoryKindParameterList-111]
	_ = x[MemoryKindTypeParameter-112]
	_ = x[MemoryKindTypeParameterList-113]
	_ = x[MemoryKindTransfer-114]
	_ = x[MemoryKindMembers-115]
	_ = x[MemoryKindTypeAnnotation-116]
	_ = x[MemoryKindDictionaryEntry-117]
	_ = x[MemoryKindFunctionDeclaration-118]
	_ = x[MemoryKindCompositeDeclaration-119]
	_ = x[MemoryKindAttachmentDeclaration-120]
	_ = x[MemoryKindInterfaceDeclaration-121]
	_ = x[MemoryKindEnumCaseDeclaration-122]
	_ = x[MemoryKindFieldDeclaration-123]
	_ = x[MemoryKindTransactionDeclaration-124]
	_ = x[MemoryKindImportDeclaration-125]
	_ = x[MemoryKindVariableDeclaration-126]
	_ = x[MemoryKindSpecialFunctionDeclaration-127]
	_ = x[MemoryKindPragmaDeclaration-128]
	_ = x[MemoryKindAssignmentStatement-129]
	_ = x[MemoryKindBreakStatement-130]
	_ = x[MemoryKindContinueStatement-131]
	_ = x[MemoryKindEmitStatement-132]
	_ = x[MemoryKindExpressionStatement-133]
	_ = x[MemoryKindForStatement-134]
	_ = x[MemoryKindIfStatement-135]
	_ = x[MemoryKindReturnStatement-136]
	_ = x[MemoryKindSwapStatement-137]
	_ = x[MemoryKindSwitchStatement-138]
	_ = x[MemoryKindWhileStatement-139]
	_ = x[MemoryKindRemoveStatement-140]
	_ = x[MemoryKindBooleanExpression-141]
	_ = x[MemoryKindVoidExpression-142]
	_ = x[MemoryKindNilExpression-143]
	_ = x[MemoryKindStringExpression-144]
	_ = x[MemoryKindIntegerExpression-145]
	_ = x[MemoryKindFixedPointExpression-146]
	_ = x[MemoryKindArrayExpression-147]
	_ = x[MemoryKindDictionaryExpression-148]
	_ = x[MemoryKindIdentifierExpression-149]
	_ = x[MemoryKindInvocationExpression-150]
	_ = x[MemoryKindMemberExpression-151]
	_ = x[MemoryKindIndexExpression-152]
	_ = x[MemoryKindConditionalExpression-153]
	_ = x[MemoryKindUnaryExpression-154]
	_ = x[MemoryKindBinaryExpression-155]
	_ = x[MemoryKindFunctionExpression-156]
	_ = x[MemoryKindCastingExpression-157]
	_ = x[MemoryKindCreateExpression-158]
	_ = x[MemoryKindDestroyExpression-159]
	_ = x[MemoryKindReferenceExpression-160]
	_ = x[MemoryKindForceExpression-161]
	_ = x[MemoryKindPathExpression-162]
	_ = x[MemoryKindAttachExpression-163]
	_ = x[MemoryKindConstantSizedType-164]
	_ = x[MemoryKindDictionaryType-165]
	_ = x[MemoryKindFunctionType-166]
	_ = x[MemoryKindInstantiationType-167]
	_ = x[MemoryKindNominalType-168]
	_ = x[MemoryKindOptionalType-169]
	_ = x[MemoryKindReferenceType-170]
	_ = x[MemoryKindRestrictedType-171]
	_ = x[MemoryKindVariableSizedType-172]
	_ = x[MemoryKindPosition-173]
	_ = x[MemoryKindRange-174]
	_ = x[MemoryKindElaboration-175]
	_ = x[MemoryKindActivation-176]
	_ = x[MemoryKindActivationEntries-177]
	_ = x[MemoryKindVariableSizedSemaType-178]
	_ = x[MemoryKindConstantSizedSemaType-179]
	_ = x[MemoryKindDictionarySemaType-180]
	_ = x[MemoryKindOptionalSemaType-181]
	_ = x[MemoryKindRestrictedSemaType-182]
	_ = x[MemoryKindReferenceSemaType-183]
	_ = x[MemoryKindCapabilitySemaType-184]
	_ = x[MemoryKindOrderedMap-185]
	_ = x[MemoryKindOrderedMapEntryList-186]
	_ = x[MemoryKindOrderedMapEntry-187]
	_ = x[MemoryKindLast-188]
}

const _MemoryKind_name = "UnknownAddressValueStringValueCharacterValueNumberValueArrayValueBaseDictionaryValueBaseCompositeValueBaseSimpleCompositeValueBaseOptionalValueTypeValuePathValueIDCapabilityValuePathCapabilityValueStorageReferenceValueAccountReferenceValueEphemeralReferenceValueInterpretedFunctionValueHostFunctionValueBoundFunctionValueBigIntSimpleCompositeValuePublishedValueStorageCapabilityControllerValueAccountCapabilityControllerValueAtreeArrayDataSlabAtreeArrayMetaDataSlabAtreeArrayElementOverheadAtreeMapDataSlabAtreeMapMetaDataSlabAtreeMapElementOverheadAtreeMapPreAllocatedElementAtreeEncodedSlabPrimitiveStaticTypeCompositeStaticTypeInterfaceStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeOptionalStaticTypeRestrictedStaticTypeReferenceStaticTypeCapabilityStaticTypeFunctionStaticTypeCadenceVoidValueCadenceOptionalValueCadenceBoolValueCadenceStringValueCadenceCharacterValueCadenceAddressValueCadenceIntValueCadenceNumberValueCadenceArrayValueBaseCadenceArrayValueLengthCadenceDictionaryValueCadenceKeyValuePairCadenceStructValueBaseCadenceStructValueSizeCadenceResourceValueBaseCadenceAttachmentValueBaseCadenceResourceValueSizeCadenceAttachmentValueSizeCadenceEventValueBaseCadenceEventValueSizeCadenceContractValueBaseCadenceContractValueSizeCadenceEnumValueBaseCadenceEnumValueSizeCadencePathValueCadenceTypeValueCadenceIDCapabilityValueCadencePathCapabilityValueCadenceFunctionValueCadenceOptionalTypeCadenceVariableSizedArrayTypeCadenceConstantSizedArrayTypeCadenceDictionaryTypeCadenceFieldCadenceParameterCadenceTypeParameterCadenceStructTypeCadenceResourceTypeCadenceAttachmentTypeCadenceEventTypeCadenceContractTypeCadenceStructInterfaceTypeCadenceResourceInterfaceTypeCadenceContractInterfaceTypeCadenceFunctionTypeCadenceReferenceTypeCadenceRestrictedTypeCadenceCapabilityTypeCadenceEnumTypeRawStringAddressLocationBytesVariableCompositeTypeInfoCompositeFieldInvocationStorageMapStorageKeyTypeTokenErrorTokenSpaceTokenProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTypeParameterTypeParameterListTransferMembersTypeAnnotationDictionaryEntryFunctionDeclarationCompositeDeclarationAttachmentDeclarationInterfaceDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementRemoveStatementBooleanExpressionVoidExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionAttachExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeRestrictedTypeVariableSizedTypePositionRangeElaborationActivationActivationEntriesVariableSizedSemaTypeConstantSizedSemaTypeDictionarySemaTypeOptionalSemaTypeRestrictedSemaTypeReferenceSemaTypeCapabilitySemaTypeOrderedMapOrderedMapEntryListOrderedMapEntryLast"

var _MemoryKind_index = [...]uint16{0, 7, 19, 30, 44, 55, 69, 88, 106, 130, 143, 152, 161, 178, 197, 218, 239, 262, 286, 303, 321, 327, 347, 361, 393, 425, 443, 465, 490, 506, 526, 549, 576, 592, 611, 630, 649, 672, 695, 715, 733, 753, 772, 792, 810, 826, 846, 862, 880, 901, 920, 935, 953, 974, 997, 1019, 1038, 1060, 1082, 1106, 1132, 1156, 1182, 1203, 1224, 1248, 1272, 1292, 1312, 1328, 1344, 1368, 1394, 1414, 1433, 1462, 1491, 1512, 1524, 1540, 1560, 1577, 1596, 1617, 1633, 1652, 1678, 1706, 1734, 1753, 1773, 1794, 1815, 1830, 1839, 1854, 1859, 1867, 1884, 1898, 1908, 1918, 1928, 1937, 1947, 1957, 1964, 1974, 1982, 1987, 2000, 2009, 2022, 2035, 2052, 2060, 2067, 2081, 2096, 2115, 2135, 2156, 2176, 2195, 2211, 2233, 2250, 2269, 2295, 2312, 2331, 2345, 2362, 2375, 2394, 2406, 2417, 2432, 2445, 2460, 2474, 2489, 2506, 2520, 2533, 2549, 2566, 2586, 2601, 2621, 2641, 2661, 2677, 2692, 2713, 2728, 2744, 2762, 2779, 2795, 2812, 2831, 2846, 2860, 2876, 2893, 2907, 2919, 2936, 2947, 2959, 2972, 2986, 3003, 3011, 3016, 3027, 3037, 3054, 3075, 3096, 3114, 3130, 3148, 3165, 3183, 3193, 3212, 3227, 3231}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
