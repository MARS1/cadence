// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindAddressValue-1]
	_ = x[MemoryKindStringValue-2]
	_ = x[MemoryKindCharacterValue-3]
	_ = x[MemoryKindNumberValue-4]
	_ = x[MemoryKindArrayValueBase-5]
	_ = x[MemoryKindDictionaryValueBase-6]
	_ = x[MemoryKindCompositeValueBase-7]
	_ = x[MemoryKindSimpleCompositeValueBase-8]
	_ = x[MemoryKindOptionalValue-9]
	_ = x[MemoryKindTypeValue-10]
	_ = x[MemoryKindPathValue-11]
	_ = x[MemoryKindIDCapabilityValue-12]
	_ = x[MemoryKindStorageReferenceValue-13]
	_ = x[MemoryKindAccountReferenceValue-14]
	_ = x[MemoryKindEphemeralReferenceValue-15]
	_ = x[MemoryKindInterpretedFunctionValue-16]
	_ = x[MemoryKindHostFunctionValue-17]
	_ = x[MemoryKindBoundFunctionValue-18]
	_ = x[MemoryKindBigInt-19]
	_ = x[MemoryKindSimpleCompositeValue-20]
	_ = x[MemoryKindPublishedValue-21]
	_ = x[MemoryKindStorageCapabilityControllerValue-22]
	_ = x[MemoryKindAccountCapabilityControllerValue-23]
	_ = x[MemoryKindAtreeArrayDataSlab-24]
	_ = x[MemoryKindAtreeArrayMetaDataSlab-25]
	_ = x[MemoryKindAtreeArrayElementOverhead-26]
	_ = x[MemoryKindAtreeMapDataSlab-27]
	_ = x[MemoryKindAtreeMapMetaDataSlab-28]
	_ = x[MemoryKindAtreeMapElementOverhead-29]
	_ = x[MemoryKindAtreeMapPreAllocatedElement-30]
	_ = x[MemoryKindAtreeEncodedSlab-31]
	_ = x[MemoryKindPrimitiveStaticType-32]
	_ = x[MemoryKindCompositeStaticType-33]
	_ = x[MemoryKindInterfaceStaticType-34]
	_ = x[MemoryKindVariableSizedStaticType-35]
	_ = x[MemoryKindConstantSizedStaticType-36]
	_ = x[MemoryKindDictionaryStaticType-37]
	_ = x[MemoryKindOptionalStaticType-38]
	_ = x[MemoryKindRestrictedStaticType-39]
	_ = x[MemoryKindReferenceStaticType-40]
	_ = x[MemoryKindCapabilityStaticType-41]
	_ = x[MemoryKindFunctionStaticType-42]
	_ = x[MemoryKindCadenceVoidValue-43]
	_ = x[MemoryKindCadenceOptionalValue-44]
	_ = x[MemoryKindCadenceBoolValue-45]
	_ = x[MemoryKindCadenceStringValue-46]
	_ = x[MemoryKindCadenceCharacterValue-47]
	_ = x[MemoryKindCadenceAddressValue-48]
	_ = x[MemoryKindCadenceIntValue-49]
	_ = x[MemoryKindCadenceNumberValue-50]
	_ = x[MemoryKindCadenceArrayValueBase-51]
	_ = x[MemoryKindCadenceArrayValueLength-52]
	_ = x[MemoryKindCadenceDictionaryValue-53]
	_ = x[MemoryKindCadenceKeyValuePair-54]
	_ = x[MemoryKindCadenceStructValueBase-55]
	_ = x[MemoryKindCadenceStructValueSize-56]
	_ = x[MemoryKindCadenceResourceValueBase-57]
	_ = x[MemoryKindCadenceAttachmentValueBase-58]
	_ = x[MemoryKindCadenceResourceValueSize-59]
	_ = x[MemoryKindCadenceAttachmentValueSize-60]
	_ = x[MemoryKindCadenceEventValueBase-61]
	_ = x[MemoryKindCadenceEventValueSize-62]
	_ = x[MemoryKindCadenceContractValueBase-63]
	_ = x[MemoryKindCadenceContractValueSize-64]
	_ = x[MemoryKindCadenceEnumValueBase-65]
	_ = x[MemoryKindCadenceEnumValueSize-66]
	_ = x[MemoryKindCadencePathValue-67]
	_ = x[MemoryKindCadenceTypeValue-68]
	_ = x[MemoryKindCadenceIDCapabilityValue-69]
	_ = x[MemoryKindCadenceFunctionValue-70]
	_ = x[MemoryKindCadenceOptionalType-71]
	_ = x[MemoryKindCadenceVariableSizedArrayType-72]
	_ = x[MemoryKindCadenceConstantSizedArrayType-73]
	_ = x[MemoryKindCadenceDictionaryType-74]
	_ = x[MemoryKindCadenceField-75]
	_ = x[MemoryKindCadenceParameter-76]
	_ = x[MemoryKindCadenceTypeParameter-77]
	_ = x[MemoryKindCadenceStructType-78]
	_ = x[MemoryKindCadenceResourceType-79]
	_ = x[MemoryKindCadenceAttachmentType-80]
	_ = x[MemoryKindCadenceEventType-81]
	_ = x[MemoryKindCadenceContractType-82]
	_ = x[MemoryKindCadenceStructInterfaceType-83]
	_ = x[MemoryKindCadenceResourceInterfaceType-84]
	_ = x[MemoryKindCadenceContractInterfaceType-85]
	_ = x[MemoryKindCadenceFunctionType-86]
	_ = x[MemoryKindCadenceReferenceType-87]
	_ = x[MemoryKindCadenceRestrictedType-88]
	_ = x[MemoryKindCadenceCapabilityType-89]
	_ = x[MemoryKindCadenceEnumType-90]
	_ = x[MemoryKindRawString-91]
	_ = x[MemoryKindAddressLocation-92]
	_ = x[MemoryKindBytes-93]
	_ = x[MemoryKindVariable-94]
	_ = x[MemoryKindCompositeTypeInfo-95]
	_ = x[MemoryKindCompositeField-96]
	_ = x[MemoryKindInvocation-97]
	_ = x[MemoryKindStorageMap-98]
	_ = x[MemoryKindStorageKey-99]
	_ = x[MemoryKindTypeToken-100]
	_ = x[MemoryKindErrorToken-101]
	_ = x[MemoryKindSpaceToken-102]
	_ = x[MemoryKindProgram-103]
	_ = x[MemoryKindIdentifier-104]
	_ = x[MemoryKindArgument-105]
	_ = x[MemoryKindBlock-106]
	_ = x[MemoryKindFunctionBlock-107]
	_ = x[MemoryKindParameter-108]
	_ = x[MemoryKindParameterList-109]
	_ = x[MemoryKindTypeParameter-110]
	_ = x[MemoryKindTypeParameterList-111]
	_ = x[MemoryKindTransfer-112]
	_ = x[MemoryKindMembers-113]
	_ = x[MemoryKindTypeAnnotation-114]
	_ = x[MemoryKindDictionaryEntry-115]
	_ = x[MemoryKindFunctionDeclaration-116]
	_ = x[MemoryKindCompositeDeclaration-117]
	_ = x[MemoryKindAttachmentDeclaration-118]
	_ = x[MemoryKindInterfaceDeclaration-119]
	_ = x[MemoryKindEnumCaseDeclaration-120]
	_ = x[MemoryKindFieldDeclaration-121]
	_ = x[MemoryKindTransactionDeclaration-122]
	_ = x[MemoryKindImportDeclaration-123]
	_ = x[MemoryKindVariableDeclaration-124]
	_ = x[MemoryKindSpecialFunctionDeclaration-125]
	_ = x[MemoryKindPragmaDeclaration-126]
	_ = x[MemoryKindAssignmentStatement-127]
	_ = x[MemoryKindBreakStatement-128]
	_ = x[MemoryKindContinueStatement-129]
	_ = x[MemoryKindEmitStatement-130]
	_ = x[MemoryKindExpressionStatement-131]
	_ = x[MemoryKindForStatement-132]
	_ = x[MemoryKindIfStatement-133]
	_ = x[MemoryKindReturnStatement-134]
	_ = x[MemoryKindSwapStatement-135]
	_ = x[MemoryKindSwitchStatement-136]
	_ = x[MemoryKindWhileStatement-137]
	_ = x[MemoryKindRemoveStatement-138]
	_ = x[MemoryKindBooleanExpression-139]
	_ = x[MemoryKindVoidExpression-140]
	_ = x[MemoryKindNilExpression-141]
	_ = x[MemoryKindStringExpression-142]
	_ = x[MemoryKindIntegerExpression-143]
	_ = x[MemoryKindFixedPointExpression-144]
	_ = x[MemoryKindArrayExpression-145]
	_ = x[MemoryKindDictionaryExpression-146]
	_ = x[MemoryKindIdentifierExpression-147]
	_ = x[MemoryKindInvocationExpression-148]
	_ = x[MemoryKindMemberExpression-149]
	_ = x[MemoryKindIndexExpression-150]
	_ = x[MemoryKindConditionalExpression-151]
	_ = x[MemoryKindUnaryExpression-152]
	_ = x[MemoryKindBinaryExpression-153]
	_ = x[MemoryKindFunctionExpression-154]
	_ = x[MemoryKindCastingExpression-155]
	_ = x[MemoryKindCreateExpression-156]
	_ = x[MemoryKindDestroyExpression-157]
	_ = x[MemoryKindReferenceExpression-158]
	_ = x[MemoryKindForceExpression-159]
	_ = x[MemoryKindPathExpression-160]
	_ = x[MemoryKindAttachExpression-161]
	_ = x[MemoryKindConstantSizedType-162]
	_ = x[MemoryKindDictionaryType-163]
	_ = x[MemoryKindFunctionType-164]
	_ = x[MemoryKindInstantiationType-165]
	_ = x[MemoryKindNominalType-166]
	_ = x[MemoryKindOptionalType-167]
	_ = x[MemoryKindReferenceType-168]
	_ = x[MemoryKindRestrictedType-169]
	_ = x[MemoryKindVariableSizedType-170]
	_ = x[MemoryKindPosition-171]
	_ = x[MemoryKindRange-172]
	_ = x[MemoryKindElaboration-173]
	_ = x[MemoryKindActivation-174]
	_ = x[MemoryKindActivationEntries-175]
	_ = x[MemoryKindVariableSizedSemaType-176]
	_ = x[MemoryKindConstantSizedSemaType-177]
	_ = x[MemoryKindDictionarySemaType-178]
	_ = x[MemoryKindOptionalSemaType-179]
	_ = x[MemoryKindRestrictedSemaType-180]
	_ = x[MemoryKindReferenceSemaType-181]
	_ = x[MemoryKindCapabilitySemaType-182]
	_ = x[MemoryKindOrderedMap-183]
	_ = x[MemoryKindOrderedMapEntryList-184]
	_ = x[MemoryKindOrderedMapEntry-185]
	_ = x[MemoryKindLast-186]
}

const _MemoryKind_name = "UnknownAddressValueStringValueCharacterValueNumberValueArrayValueBaseDictionaryValueBaseCompositeValueBaseSimpleCompositeValueBaseOptionalValueTypeValuePathValueIDCapabilityValueStorageReferenceValueAccountReferenceValueEphemeralReferenceValueInterpretedFunctionValueHostFunctionValueBoundFunctionValueBigIntSimpleCompositeValuePublishedValueStorageCapabilityControllerValueAccountCapabilityControllerValueAtreeArrayDataSlabAtreeArrayMetaDataSlabAtreeArrayElementOverheadAtreeMapDataSlabAtreeMapMetaDataSlabAtreeMapElementOverheadAtreeMapPreAllocatedElementAtreeEncodedSlabPrimitiveStaticTypeCompositeStaticTypeInterfaceStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeOptionalStaticTypeRestrictedStaticTypeReferenceStaticTypeCapabilityStaticTypeFunctionStaticTypeCadenceVoidValueCadenceOptionalValueCadenceBoolValueCadenceStringValueCadenceCharacterValueCadenceAddressValueCadenceIntValueCadenceNumberValueCadenceArrayValueBaseCadenceArrayValueLengthCadenceDictionaryValueCadenceKeyValuePairCadenceStructValueBaseCadenceStructValueSizeCadenceResourceValueBaseCadenceAttachmentValueBaseCadenceResourceValueSizeCadenceAttachmentValueSizeCadenceEventValueBaseCadenceEventValueSizeCadenceContractValueBaseCadenceContractValueSizeCadenceEnumValueBaseCadenceEnumValueSizeCadencePathValueCadenceTypeValueCadenceIDCapabilityValueCadenceFunctionValueCadenceOptionalTypeCadenceVariableSizedArrayTypeCadenceConstantSizedArrayTypeCadenceDictionaryTypeCadenceFieldCadenceParameterCadenceTypeParameterCadenceStructTypeCadenceResourceTypeCadenceAttachmentTypeCadenceEventTypeCadenceContractTypeCadenceStructInterfaceTypeCadenceResourceInterfaceTypeCadenceContractInterfaceTypeCadenceFunctionTypeCadenceReferenceTypeCadenceRestrictedTypeCadenceCapabilityTypeCadenceEnumTypeRawStringAddressLocationBytesVariableCompositeTypeInfoCompositeFieldInvocationStorageMapStorageKeyTypeTokenErrorTokenSpaceTokenProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTypeParameterTypeParameterListTransferMembersTypeAnnotationDictionaryEntryFunctionDeclarationCompositeDeclarationAttachmentDeclarationInterfaceDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementRemoveStatementBooleanExpressionVoidExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionAttachExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeRestrictedTypeVariableSizedTypePositionRangeElaborationActivationActivationEntriesVariableSizedSemaTypeConstantSizedSemaTypeDictionarySemaTypeOptionalSemaTypeRestrictedSemaTypeReferenceSemaTypeCapabilitySemaTypeOrderedMapOrderedMapEntryListOrderedMapEntryLast"

var _MemoryKind_index = [...]uint16{0, 7, 19, 30, 44, 55, 69, 88, 106, 130, 143, 152, 161, 178, 199, 220, 243, 267, 284, 302, 308, 328, 342, 374, 406, 424, 446, 471, 487, 507, 530, 557, 573, 592, 611, 630, 653, 676, 696, 714, 734, 753, 773, 791, 807, 827, 843, 861, 882, 901, 916, 934, 955, 978, 1000, 1019, 1041, 1063, 1087, 1113, 1137, 1163, 1184, 1205, 1229, 1253, 1273, 1293, 1309, 1325, 1349, 1369, 1388, 1417, 1446, 1467, 1479, 1495, 1515, 1532, 1551, 1572, 1588, 1607, 1633, 1661, 1689, 1708, 1728, 1749, 1770, 1785, 1794, 1809, 1814, 1822, 1839, 1853, 1863, 1873, 1883, 1892, 1902, 1912, 1919, 1929, 1937, 1942, 1955, 1964, 1977, 1990, 2007, 2015, 2022, 2036, 2051, 2070, 2090, 2111, 2131, 2150, 2166, 2188, 2205, 2224, 2250, 2267, 2286, 2300, 2317, 2330, 2349, 2361, 2372, 2387, 2400, 2415, 2429, 2444, 2461, 2475, 2488, 2504, 2521, 2541, 2556, 2576, 2596, 2616, 2632, 2647, 2668, 2683, 2699, 2717, 2734, 2750, 2767, 2786, 2801, 2815, 2831, 2848, 2862, 2874, 2891, 2902, 2914, 2927, 2941, 2958, 2966, 2971, 2982, 2992, 3009, 3030, 3051, 3069, 3085, 3103, 3120, 3138, 3148, 3167, 3182, 3186}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
